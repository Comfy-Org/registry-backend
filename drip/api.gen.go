// Package drip provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package drip

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ActionJobResult defines model for ActionJobResult.
type ActionJobResult struct {
	// ActionRunId Identifier of the run this result belongs to
	ActionRunId *string `json:"action_run_id,omitempty"`

	// CommitHash The hash of the commit
	CommitHash *string `json:"commit_hash,omitempty"`

	// CommitId The ID of the commit
	CommitId *string `json:"commit_id,omitempty"`

	// CommitMessage The message of the commit
	CommitMessage *string `json:"commit_message,omitempty"`

	// CommitTime The Unix timestamp when the commit was made
	CommitTime *int64 `json:"commit_time,omitempty"`

	// EndTime The end time of the job as a Unix timestamp.
	EndTime *int64 `json:"end_time,omitempty"`

	// GitRepo The repository name
	GitRepo *string `json:"git_repo,omitempty"`

	// GpuType GPU type used
	GpuType *string `json:"gpu_type,omitempty"`

	// Id Unique identifier for the job result
	Id *openapi_types.UUID `json:"id,omitempty"`

	// OperatingSystem Operating system used
	OperatingSystem *string `json:"operating_system,omitempty"`

	// PytorchVersion PyTorch version used
	PytorchVersion *string `json:"pytorch_version,omitempty"`

	// StartTime The start time of the job as a Unix timestamp.
	StartTime   *int64       `json:"start_time,omitempty"`
	StorageFile *StorageFile `json:"storage_file,omitempty"`

	// WorkflowName Name of the workflow
	WorkflowName *string `json:"workflow_name,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Details Optional detailed information about the error or hints for resolving it.
	Details *[]string `json:"details,omitempty"`

	// Message A clear and concise description of the error.
	Message *string `json:"message,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// Node defines model for Node.
type Node struct {
	Author      *string `json:"author,omitempty"`
	Description *string `json:"description,omitempty"`

	// Downloads The number of downloads of the node.
	Downloads *int `json:"downloads,omitempty"`

	// Icon URL to the node's icon.
	Icon *string `json:"icon,omitempty"`

	// Id The unique identifier of the node.
	Id            *string      `json:"id,omitempty"`
	LatestVersion *NodeVersion `json:"latest_version,omitempty"`

	// License The path to the LICENSE file in the node's repository.
	License *string `json:"license,omitempty"`

	// Name The display name of the node.
	Name      *string    `json:"name,omitempty"`
	Publisher *Publisher `json:"publisher,omitempty"`

	// Rating The average rating of the node.
	Rating *float32 `json:"rating,omitempty"`

	// Repository URL to the node's repository.
	Repository *string   `json:"repository,omitempty"`
	Tags       *[]string `json:"tags,omitempty"`
}

// NodeVersion defines model for NodeVersion.
type NodeVersion struct {
	// Changelog Summary of changes made in this version
	Changelog *string `json:"changelog,omitempty"`

	// CreatedAt The date and time the version was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Dependencies A list of pip dependencies required by the node.
	Dependencies *[]string `json:"dependencies,omitempty"`

	// Deprecated Indicates if this version is deprecated.
	Deprecated *bool `json:"deprecated,omitempty"`

	// DownloadUrl [Output Only] URL to download this version of the node
	DownloadUrl *string `json:"downloadUrl,omitempty"`
	Id          *string `json:"id,omitempty"`

	// Version The version identifier, following semantic versioning. Must be unique for the node.
	Version *string `json:"version,omitempty"`
}

// NodeVersionUpdateRequest defines model for NodeVersionUpdateRequest.
type NodeVersionUpdateRequest struct {
	// Changelog The changelog describing the version changes.
	Changelog *string `json:"changelog,omitempty"`

	// Deprecated Whether the version is deprecated.
	Deprecated *bool `json:"deprecated,omitempty"`
}

// PersonalAccessToken defines model for PersonalAccessToken.
type PersonalAccessToken struct {
	// CreatedAt [Output Only]The date and time the token was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Description Optional. A more detailed description of the token's intended use.
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the GitCommit
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Required. The name of the token. Can be a simple description.
	Name *string `json:"name,omitempty"`

	// Token [Output Only]. The personal access token. Only returned during creation.
	Token *string `json:"token,omitempty"`
}

// Publisher defines model for Publisher.
type Publisher struct {
	// CreatedAt The date and time the publisher was created.
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`

	// Id The unique identifier for the publisher. It's akin to a username. Should be lowercase.
	Id *string `json:"id,omitempty"`

	// Logo URL to the publisher's logo.
	Logo *string `json:"logo,omitempty"`

	// Members A list of members in the publisher.
	Members        *[]PublisherMember `json:"members,omitempty"`
	Name           *string            `json:"name,omitempty"`
	SourceCodeRepo *string            `json:"source_code_repo,omitempty"`
	Support        *string            `json:"support,omitempty"`
	Website        *string            `json:"website,omitempty"`
}

// PublisherMember defines model for PublisherMember.
type PublisherMember struct {
	// Id The unique identifier for the publisher member.
	Id *string `json:"id,omitempty"`

	// Role The role of the user in the publisher.
	Role *string        `json:"role,omitempty"`
	User *PublisherUser `json:"user,omitempty"`
}

// PublisherUser defines model for PublisherUser.
type PublisherUser struct {
	// Email The email address for this user.
	Email *string `json:"email,omitempty"`

	// Id The unique id for this user.
	Id *string `json:"id,omitempty"`

	// Name The name for this user.
	Name *string `json:"name,omitempty"`
}

// StorageFile defines model for StorageFile.
type StorageFile struct {
	// FilePath Path to the file in storage
	FilePath *string `json:"file_path,omitempty"`

	// Id Unique identifier for the storage file
	Id *openapi_types.UUID `json:"id,omitempty"`

	// PublicUrl Public URL
	PublicUrl *string `json:"public_url,omitempty"`
}

// User defines model for User.
type User struct {
	// Email The email address for this user.
	Email *string `json:"email,omitempty"`

	// Id The unique id for this user.
	Id *string `json:"id,omitempty"`

	// IsAdmin Indicates if the user has admin privileges.
	IsAdmin *bool `json:"isAdmin,omitempty"`

	// IsApproved Indicates if the user is approved.
	IsApproved *bool `json:"isApproved,omitempty"`

	// Name The name for this user.
	Name *string `json:"name,omitempty"`
}

// GetBranchParams defines parameters for GetBranch.
type GetBranchParams struct {
	// RepoName The repo to filter by.
	RepoName string `form:"repo_name" json:"repo_name"`
}

// GetGitcommitParams defines parameters for GetGitcommit.
type GetGitcommitParams struct {
	// CommitId The ID of the commit to fetch data for.
	CommitId *string `form:"commitId,omitempty" json:"commitId,omitempty"`

	// OperatingSystem The operating system to filter the CI data by.
	OperatingSystem *string `form:"operatingSystem,omitempty" json:"operatingSystem,omitempty"`

	// WorkflowName The name of the workflow to filter the CI data by.
	WorkflowName *string `form:"workflowName,omitempty" json:"workflowName,omitempty"`

	// Branch The branch of the gitcommit to filter the CI data by.
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Page The page number to retrieve.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of items to include per page.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// RepoName The repo to filter by.
	RepoName *string `form:"repoName,omitempty" json:"repoName,omitempty"`
}

// ListAllNodesParams defines parameters for ListAllNodes.
type ListAllNodesParams struct {
	// Page Page number of the nodes list
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of nodes to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// SearchNodesParams defines parameters for SearchNodes.
type SearchNodesParams struct {
	// Page Page number of the nodes list
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of nodes to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Search Keyword to search the nodes
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// InstallNodeParams defines parameters for InstallNode.
type InstallNodeParams struct {
	// Version Specific version of the node to retrieve. If omitted, the latest version is returned.
	Version *string `form:"version,omitempty" json:"version,omitempty"`
}

// ValidatePublisherParams defines parameters for ValidatePublisher.
type ValidatePublisherParams struct {
	// Username The publisher username to validate.
	Username string `form:"username" json:"username"`
}

// PublishNodeVersionJSONBody defines parameters for PublishNodeVersion.
type PublishNodeVersionJSONBody struct {
	Node                Node        `json:"node"`
	NodeVersion         NodeVersion `json:"node_version"`
	PersonalAccessToken string      `json:"personal_access_token"`
}

// PostUploadArtifactJSONBody defines parameters for PostUploadArtifact.
type PostUploadArtifactJSONBody struct {
	BranchName string `json:"branch_name"`

	// BucketName The name of the bucket where the output files are stored
	BucketName *string `json:"bucket_name,omitempty"`

	// ComfyLogsGcsPath The path to ComfyUI logs. eg. gs://bucket-name/logs
	ComfyLogsGcsPath *string `json:"comfy_logs_gcs_path,omitempty"`
	CommitHash       string  `json:"commit_hash"`

	// CommitMessage The commit message
	CommitMessage string `json:"commit_message"`

	// CommitTime The time of the commit in the format of "YYYY-MM-DDTHH:MM:SSZ" (2016-10-10T00:00:00Z)
	CommitTime string `json:"commit_time"`

	// CudaVersion Cuda version.
	CudaVersion *string `json:"cuda_version,omitempty"`

	// EndTime The end time of the job as a Unix timestamp.
	EndTime int64 `json:"end_time"`

	// JobId Unique identifier for the job
	JobId string `json:"job_id"`

	// Os Operating system used in the run
	Os string `json:"os"`

	// OutputFilesGcsPaths A comma separated string that contains GCS path(s) to output files. eg. gs://bucket-name/output, gs://bucket-name/output2
	OutputFilesGcsPaths *string `json:"output_files_gcs_paths,omitempty"`

	// Repo Repository name
	Repo string `json:"repo"`

	// RunId Unique identifier for the run
	RunId string `json:"run_id"`

	// StartTime The start time of the job as a Unix timestamp.
	StartTime int64 `json:"start_time"`

	// WorkflowName The name of the workflow
	WorkflowName string `json:"workflow_name"`
}

// CreatePublisherJSONRequestBody defines body for CreatePublisher for application/json ContentType.
type CreatePublisherJSONRequestBody = Publisher

// UpdatePublisherJSONRequestBody defines body for UpdatePublisher for application/json ContentType.
type UpdatePublisherJSONRequestBody = Publisher

// CreateNodeJSONRequestBody defines body for CreateNode for application/json ContentType.
type CreateNodeJSONRequestBody = Node

// UpdateNodeJSONRequestBody defines body for UpdateNode for application/json ContentType.
type UpdateNodeJSONRequestBody = Node

// PublishNodeVersionJSONRequestBody defines body for PublishNodeVersion for application/json ContentType.
type PublishNodeVersionJSONRequestBody PublishNodeVersionJSONBody

// UpdateNodeVersionJSONRequestBody defines body for UpdateNodeVersion for application/json ContentType.
type UpdateNodeVersionJSONRequestBody = NodeVersionUpdateRequest

// CreatePersonalAccessTokenJSONRequestBody defines body for CreatePersonalAccessToken for application/json ContentType.
type CreatePersonalAccessTokenJSONRequestBody = PersonalAccessToken

// PostUploadArtifactJSONRequestBody defines body for PostUploadArtifact for application/json ContentType.
type PostUploadArtifactJSONRequestBody PostUploadArtifactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve all distinct branches for a given repo
	// (GET /branch)
	GetBranch(ctx echo.Context, params GetBranchParams) error
	// Retrieve CI data for a given commit
	// (GET /gitcommit)
	GetGitcommit(ctx echo.Context, params GetGitcommitParams) error
	// Retrieves a list of nodes
	// (GET /nodes)
	ListAllNodes(ctx echo.Context, params ListAllNodesParams) error
	// Retrieves a list of nodes
	// (GET /nodes/search)
	SearchNodes(ctx echo.Context, params SearchNodesParams) error
	// Retrieve a specific node by ID
	// (GET /nodes/{nodeId})
	GetNode(ctx echo.Context, nodeId string) error
	// Returns a node version to be installed.
	// (GET /nodes/{nodeId}/install)
	InstallNode(ctx echo.Context, nodeId string, params InstallNodeParams) error
	// List all versions of a node
	// (GET /nodes/{nodeId}/versions)
	ListNodeVersions(ctx echo.Context, nodeId string) error
	// Retrieve a specific version of a node
	// (GET /nodes/{nodeId}/versions/{versionId})
	GetNodeVersion(ctx echo.Context, nodeId string, versionId string) error
	// Retrieve all publishers
	// (GET /publishers)
	ListPublishers(ctx echo.Context) error
	// Create a new publisher
	// (POST /publishers)
	CreatePublisher(ctx echo.Context) error
	// Validate if a publisher username is available
	// (GET /publishers/validate)
	ValidatePublisher(ctx echo.Context, params ValidatePublisherParams) error
	// Delete a publisher
	// (DELETE /publishers/{publisherId})
	DeletePublisher(ctx echo.Context, publisherId string) error
	// Retrieve a publisher by ID
	// (GET /publishers/{publisherId})
	GetPublisher(ctx echo.Context, publisherId string) error
	// Update a publisher
	// (PUT /publishers/{publisherId})
	UpdatePublisher(ctx echo.Context, publisherId string) error
	// Retrieve all nodes
	// (GET /publishers/{publisherId}/nodes)
	ListNodesForPublisher(ctx echo.Context, publisherId string) error
	// Create a new custom node
	// (POST /publishers/{publisherId}/nodes)
	CreateNode(ctx echo.Context, publisherId string) error
	// Delete a specific node
	// (DELETE /publishers/{publisherId}/nodes/{nodeId})
	DeleteNode(ctx echo.Context, publisherId string, nodeId string) error
	// Update a specific node
	// (PUT /publishers/{publisherId}/nodes/{nodeId})
	UpdateNode(ctx echo.Context, publisherId string, nodeId string) error
	// Retrieve permissions the user has for a given publisher
	// (GET /publishers/{publisherId}/nodes/{nodeId}/permissions)
	GetPermissionOnPublisherNodes(ctx echo.Context, publisherId string, nodeId string) error
	// Publish a new version of a node
	// (POST /publishers/{publisherId}/nodes/{nodeId}/versions)
	PublishNodeVersion(ctx echo.Context, publisherId string, nodeId string) error
	// Unpublish (delete) a specific version of a node
	// (DELETE /publishers/{publisherId}/nodes/{nodeId}/versions/{versionId})
	DeleteNodeVersion(ctx echo.Context, publisherId string, nodeId string, versionId string) error
	// Update changelog and deprecation status of a node version
	// (PUT /publishers/{publisherId}/nodes/{nodeId}/versions/{versionId})
	UpdateNodeVersion(ctx echo.Context, publisherId string, nodeId string, versionId string) error
	// Retrieve permissions the user has for a given publisher
	// (GET /publishers/{publisherId}/permissions)
	GetPermissionOnPublisher(ctx echo.Context, publisherId string) error
	// Retrieve all personal access tokens for a publisher
	// (GET /publishers/{publisherId}/tokens)
	ListPersonalAccessTokens(ctx echo.Context, publisherId string) error
	// Create a new personal access token
	// (POST /publishers/{publisherId}/tokens)
	CreatePersonalAccessToken(ctx echo.Context, publisherId string) error
	// Delete a specific personal access token
	// (DELETE /publishers/{publisherId}/tokens/{tokenId})
	DeletePersonalAccessToken(ctx echo.Context, publisherId string, tokenId string) error
	// Receive artifacts (output files) from the ComfyUI GitHub Action
	// (POST /upload-artifact)
	PostUploadArtifact(ctx echo.Context) error
	// Get information about the calling user.
	// (GET /users)
	GetUser(ctx echo.Context) error
	// Retrieve all publishers for a given user
	// (GET /users/publishers/)
	ListPublishersForUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBranch converts echo context to params.
func (w *ServerInterfaceWrapper) GetBranch(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBranchParams
	// ------------- Required query parameter "repo_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "repo_name", ctx.QueryParams(), &params.RepoName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repo_name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBranch(ctx, params)
	return err
}

// GetGitcommit converts echo context to params.
func (w *ServerInterfaceWrapper) GetGitcommit(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGitcommitParams
	// ------------- Optional query parameter "commitId" -------------

	err = runtime.BindQueryParameter("form", true, false, "commitId", ctx.QueryParams(), &params.CommitId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commitId: %s", err))
	}

	// ------------- Optional query parameter "operatingSystem" -------------

	err = runtime.BindQueryParameter("form", true, false, "operatingSystem", ctx.QueryParams(), &params.OperatingSystem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter operatingSystem: %s", err))
	}

	// ------------- Optional query parameter "workflowName" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflowName", ctx.QueryParams(), &params.WorkflowName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workflowName: %s", err))
	}

	// ------------- Optional query parameter "branch" -------------

	err = runtime.BindQueryParameter("form", true, false, "branch", ctx.QueryParams(), &params.Branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "repoName" -------------

	err = runtime.BindQueryParameter("form", true, false, "repoName", ctx.QueryParams(), &params.RepoName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repoName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGitcommit(ctx, params)
	return err
}

// ListAllNodes converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllNodes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAllNodesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAllNodes(ctx, params)
	return err
}

// SearchNodes converts echo context to params.
func (w *ServerInterfaceWrapper) SearchNodes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchNodesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchNodes(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", ctx.Param("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNode(ctx, nodeId)
	return err
}

// InstallNode converts echo context to params.
func (w *ServerInterfaceWrapper) InstallNode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", ctx.Param("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallNodeParams
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstallNode(ctx, nodeId, params)
	return err
}

// ListNodeVersions converts echo context to params.
func (w *ServerInterfaceWrapper) ListNodeVersions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", ctx.Param("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListNodeVersions(ctx, nodeId)
	return err
}

// GetNodeVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", ctx.Param("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// ------------- Path parameter "versionId" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "versionId", ctx.Param("versionId"), &versionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter versionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeVersion(ctx, nodeId, versionId)
	return err
}

// ListPublishers converts echo context to params.
func (w *ServerInterfaceWrapper) ListPublishers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPublishers(ctx)
	return err
}

// CreatePublisher converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePublisher(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePublisher(ctx)
	return err
}

// ValidatePublisher converts echo context to params.
func (w *ServerInterfaceWrapper) ValidatePublisher(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ValidatePublisherParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ValidatePublisher(ctx, params)
	return err
}

// DeletePublisher converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePublisher(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePublisher(ctx, publisherId)
	return err
}

// GetPublisher converts echo context to params.
func (w *ServerInterfaceWrapper) GetPublisher(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPublisher(ctx, publisherId)
	return err
}

// UpdatePublisher converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePublisher(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePublisher(ctx, publisherId)
	return err
}

// ListNodesForPublisher converts echo context to params.
func (w *ServerInterfaceWrapper) ListNodesForPublisher(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListNodesForPublisher(ctx, publisherId)
	return err
}

// CreateNode converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNode(ctx, publisherId)
	return err
}

// DeleteNode converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", ctx.Param("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteNode(ctx, publisherId, nodeId)
	return err
}

// UpdateNode converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateNode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", ctx.Param("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateNode(ctx, publisherId, nodeId)
	return err
}

// GetPermissionOnPublisherNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPermissionOnPublisherNodes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", ctx.Param("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPermissionOnPublisherNodes(ctx, publisherId, nodeId)
	return err
}

// PublishNodeVersion converts echo context to params.
func (w *ServerInterfaceWrapper) PublishNodeVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", ctx.Param("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PublishNodeVersion(ctx, publisherId, nodeId)
	return err
}

// DeleteNodeVersion converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNodeVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", ctx.Param("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// ------------- Path parameter "versionId" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "versionId", ctx.Param("versionId"), &versionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter versionId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteNodeVersion(ctx, publisherId, nodeId, versionId)
	return err
}

// UpdateNodeVersion converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateNodeVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", ctx.Param("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodeId: %s", err))
	}

	// ------------- Path parameter "versionId" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "versionId", ctx.Param("versionId"), &versionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter versionId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateNodeVersion(ctx, publisherId, nodeId, versionId)
	return err
}

// GetPermissionOnPublisher converts echo context to params.
func (w *ServerInterfaceWrapper) GetPermissionOnPublisher(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPermissionOnPublisher(ctx, publisherId)
	return err
}

// ListPersonalAccessTokens converts echo context to params.
func (w *ServerInterfaceWrapper) ListPersonalAccessTokens(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPersonalAccessTokens(ctx, publisherId)
	return err
}

// CreatePersonalAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePersonalAccessToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePersonalAccessToken(ctx, publisherId)
	return err
}

// DeletePersonalAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePersonalAccessToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "publisherId" -------------
	var publisherId string

	err = runtime.BindStyledParameterWithOptions("simple", "publisherId", ctx.Param("publisherId"), &publisherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publisherId: %s", err))
	}

	// ------------- Path parameter "tokenId" -------------
	var tokenId string

	err = runtime.BindStyledParameterWithOptions("simple", "tokenId", ctx.Param("tokenId"), &tokenId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePersonalAccessToken(ctx, publisherId, tokenId)
	return err
}

// PostUploadArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) PostUploadArtifact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUploadArtifact(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// ListPublishersForUser converts echo context to params.
func (w *ServerInterfaceWrapper) ListPublishersForUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPublishersForUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/branch", wrapper.GetBranch)
	router.GET(baseURL+"/gitcommit", wrapper.GetGitcommit)
	router.GET(baseURL+"/nodes", wrapper.ListAllNodes)
	router.GET(baseURL+"/nodes/search", wrapper.SearchNodes)
	router.GET(baseURL+"/nodes/:nodeId", wrapper.GetNode)
	router.GET(baseURL+"/nodes/:nodeId/install", wrapper.InstallNode)
	router.GET(baseURL+"/nodes/:nodeId/versions", wrapper.ListNodeVersions)
	router.GET(baseURL+"/nodes/:nodeId/versions/:versionId", wrapper.GetNodeVersion)
	router.GET(baseURL+"/publishers", wrapper.ListPublishers)
	router.POST(baseURL+"/publishers", wrapper.CreatePublisher)
	router.GET(baseURL+"/publishers/validate", wrapper.ValidatePublisher)
	router.DELETE(baseURL+"/publishers/:publisherId", wrapper.DeletePublisher)
	router.GET(baseURL+"/publishers/:publisherId", wrapper.GetPublisher)
	router.PUT(baseURL+"/publishers/:publisherId", wrapper.UpdatePublisher)
	router.GET(baseURL+"/publishers/:publisherId/nodes", wrapper.ListNodesForPublisher)
	router.POST(baseURL+"/publishers/:publisherId/nodes", wrapper.CreateNode)
	router.DELETE(baseURL+"/publishers/:publisherId/nodes/:nodeId", wrapper.DeleteNode)
	router.PUT(baseURL+"/publishers/:publisherId/nodes/:nodeId", wrapper.UpdateNode)
	router.GET(baseURL+"/publishers/:publisherId/nodes/:nodeId/permissions", wrapper.GetPermissionOnPublisherNodes)
	router.POST(baseURL+"/publishers/:publisherId/nodes/:nodeId/versions", wrapper.PublishNodeVersion)
	router.DELETE(baseURL+"/publishers/:publisherId/nodes/:nodeId/versions/:versionId", wrapper.DeleteNodeVersion)
	router.PUT(baseURL+"/publishers/:publisherId/nodes/:nodeId/versions/:versionId", wrapper.UpdateNodeVersion)
	router.GET(baseURL+"/publishers/:publisherId/permissions", wrapper.GetPermissionOnPublisher)
	router.GET(baseURL+"/publishers/:publisherId/tokens", wrapper.ListPersonalAccessTokens)
	router.POST(baseURL+"/publishers/:publisherId/tokens", wrapper.CreatePersonalAccessToken)
	router.DELETE(baseURL+"/publishers/:publisherId/tokens/:tokenId", wrapper.DeletePersonalAccessToken)
	router.POST(baseURL+"/upload-artifact", wrapper.PostUploadArtifact)
	router.GET(baseURL+"/users", wrapper.GetUser)
	router.GET(baseURL+"/users/publishers/", wrapper.ListPublishersForUser)

}

type GetBranchRequestObject struct {
	Params GetBranchParams
}

type GetBranchResponseObject interface {
	VisitGetBranchResponse(w http.ResponseWriter) error
}

type GetBranch200JSONResponse struct {
	Branches *[]string `json:"branches,omitempty"`
}

func (response GetBranch200JSONResponse) VisitGetBranchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBranch404Response struct {
}

func (response GetBranch404Response) VisitGetBranchResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetBranch500Response struct {
}

func (response GetBranch500Response) VisitGetBranchResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetGitcommitRequestObject struct {
	Params GetGitcommitParams
}

type GetGitcommitResponseObject interface {
	VisitGetGitcommitResponse(w http.ResponseWriter) error
}

type GetGitcommit200JSONResponse struct {
	JobResults         *[]ActionJobResult `json:"jobResults,omitempty"`
	TotalNumberOfPages *int               `json:"totalNumberOfPages,omitempty"`
}

func (response GetGitcommit200JSONResponse) VisitGetGitcommitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGitcommit404Response struct {
}

func (response GetGitcommit404Response) VisitGetGitcommitResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetGitcommit500Response struct {
}

func (response GetGitcommit500Response) VisitGetGitcommitResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ListAllNodesRequestObject struct {
	Params ListAllNodesParams
}

type ListAllNodesResponseObject interface {
	VisitListAllNodesResponse(w http.ResponseWriter) error
}

type ListAllNodes200JSONResponse struct {
	// Limit Maximum number of nodes per page
	Limit *int    `json:"limit,omitempty"`
	Nodes *[]Node `json:"nodes,omitempty"`

	// Page Current page number
	Page *int `json:"page,omitempty"`

	// Total Total number of nodes available
	Total *int `json:"total,omitempty"`

	// TotalPages Total number of pages available
	TotalPages *int `json:"totalPages,omitempty"`
}

func (response ListAllNodes200JSONResponse) VisitListAllNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAllNodes400Response struct {
}

func (response ListAllNodes400Response) VisitListAllNodesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListAllNodes404Response struct {
}

func (response ListAllNodes404Response) VisitListAllNodesResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListAllNodes500JSONResponse ErrorResponse

func (response ListAllNodes500JSONResponse) VisitListAllNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SearchNodesRequestObject struct {
	Params SearchNodesParams
}

type SearchNodesResponseObject interface {
	VisitSearchNodesResponse(w http.ResponseWriter) error
}

type SearchNodes200JSONResponse struct {
	// Limit Maximum number of nodes per page
	Limit *int    `json:"limit,omitempty"`
	Nodes *[]Node `json:"nodes,omitempty"`

	// Page Current page number
	Page *int `json:"page,omitempty"`

	// Total Total number of nodes available
	Total *int `json:"total,omitempty"`

	// TotalPages Total number of pages available
	TotalPages *int `json:"totalPages,omitempty"`
}

func (response SearchNodes200JSONResponse) VisitSearchNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchNodes400Response struct {
}

func (response SearchNodes400Response) VisitSearchNodesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SearchNodes404Response struct {
}

func (response SearchNodes404Response) VisitSearchNodesResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SearchNodes500JSONResponse ErrorResponse

func (response SearchNodes500JSONResponse) VisitSearchNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeRequestObject struct {
	NodeId string `json:"nodeId"`
}

type GetNodeResponseObject interface {
	VisitGetNodeResponse(w http.ResponseWriter) error
}

type GetNode200JSONResponse Node

func (response GetNode200JSONResponse) VisitGetNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNode403JSONResponse ErrorResponse

func (response GetNode403JSONResponse) VisitGetNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetNode404JSONResponse ErrorResponse

func (response GetNode404JSONResponse) VisitGetNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNode500JSONResponse ErrorResponse

func (response GetNode500JSONResponse) VisitGetNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type InstallNodeRequestObject struct {
	NodeId string `json:"nodeId"`
	Params InstallNodeParams
}

type InstallNodeResponseObject interface {
	VisitInstallNodeResponse(w http.ResponseWriter) error
}

type InstallNode200JSONResponse NodeVersion

func (response InstallNode200JSONResponse) VisitInstallNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type InstallNode400JSONResponse ErrorResponse

func (response InstallNode400JSONResponse) VisitInstallNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type InstallNode403JSONResponse ErrorResponse

func (response InstallNode403JSONResponse) VisitInstallNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type InstallNode404JSONResponse ErrorResponse

func (response InstallNode404JSONResponse) VisitInstallNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type InstallNode500JSONResponse ErrorResponse

func (response InstallNode500JSONResponse) VisitInstallNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListNodeVersionsRequestObject struct {
	NodeId string `json:"nodeId"`
}

type ListNodeVersionsResponseObject interface {
	VisitListNodeVersionsResponse(w http.ResponseWriter) error
}

type ListNodeVersions200JSONResponse []NodeVersion

func (response ListNodeVersions200JSONResponse) VisitListNodeVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListNodeVersions404JSONResponse Error

func (response ListNodeVersions404JSONResponse) VisitListNodeVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListNodeVersions500JSONResponse ErrorResponse

func (response ListNodeVersions500JSONResponse) VisitListNodeVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeVersionRequestObject struct {
	NodeId    string `json:"nodeId"`
	VersionId string `json:"versionId"`
}

type GetNodeVersionResponseObject interface {
	VisitGetNodeVersionResponse(w http.ResponseWriter) error
}

type GetNodeVersion200JSONResponse NodeVersion

func (response GetNodeVersion200JSONResponse) VisitGetNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeVersion404JSONResponse Error

func (response GetNodeVersion404JSONResponse) VisitGetNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeVersion500JSONResponse ErrorResponse

func (response GetNodeVersion500JSONResponse) VisitGetNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListPublishersRequestObject struct {
}

type ListPublishersResponseObject interface {
	VisitListPublishersResponse(w http.ResponseWriter) error
}

type ListPublishers200JSONResponse []Publisher

func (response ListPublishers200JSONResponse) VisitListPublishersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPublishers400JSONResponse ErrorResponse

func (response ListPublishers400JSONResponse) VisitListPublishersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListPublishers500JSONResponse ErrorResponse

func (response ListPublishers500JSONResponse) VisitListPublishersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePublisherRequestObject struct {
	Body *CreatePublisherJSONRequestBody
}

type CreatePublisherResponseObject interface {
	VisitCreatePublisherResponse(w http.ResponseWriter) error
}

type CreatePublisher201JSONResponse Publisher

func (response CreatePublisher201JSONResponse) VisitCreatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePublisher400JSONResponse ErrorResponse

func (response CreatePublisher400JSONResponse) VisitCreatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePublisher401Response struct {
}

func (response CreatePublisher401Response) VisitCreatePublisherResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreatePublisher403JSONResponse ErrorResponse

func (response CreatePublisher403JSONResponse) VisitCreatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreatePublisher500JSONResponse ErrorResponse

func (response CreatePublisher500JSONResponse) VisitCreatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ValidatePublisherRequestObject struct {
	Params ValidatePublisherParams
}

type ValidatePublisherResponseObject interface {
	VisitValidatePublisherResponse(w http.ResponseWriter) error
}

type ValidatePublisher200JSONResponse struct {
	// IsAvailable True if the username is available, false otherwise.
	IsAvailable *bool `json:"isAvailable,omitempty"`
}

func (response ValidatePublisher200JSONResponse) VisitValidatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ValidatePublisher400JSONResponse ErrorResponse

func (response ValidatePublisher400JSONResponse) VisitValidatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ValidatePublisher500JSONResponse ErrorResponse

func (response ValidatePublisher500JSONResponse) VisitValidatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePublisherRequestObject struct {
	PublisherId string `json:"publisherId"`
}

type DeletePublisherResponseObject interface {
	VisitDeletePublisherResponse(w http.ResponseWriter) error
}

type DeletePublisher204Response struct {
}

func (response DeletePublisher204Response) VisitDeletePublisherResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePublisher404JSONResponse ErrorResponse

func (response DeletePublisher404JSONResponse) VisitDeletePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePublisher500JSONResponse ErrorResponse

func (response DeletePublisher500JSONResponse) VisitDeletePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPublisherRequestObject struct {
	PublisherId string `json:"publisherId"`
}

type GetPublisherResponseObject interface {
	VisitGetPublisherResponse(w http.ResponseWriter) error
}

type GetPublisher200JSONResponse Publisher

func (response GetPublisher200JSONResponse) VisitGetPublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPublisher404JSONResponse ErrorResponse

func (response GetPublisher404JSONResponse) VisitGetPublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPublisher500JSONResponse ErrorResponse

func (response GetPublisher500JSONResponse) VisitGetPublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePublisherRequestObject struct {
	PublisherId string `json:"publisherId"`
	Body        *UpdatePublisherJSONRequestBody
}

type UpdatePublisherResponseObject interface {
	VisitUpdatePublisherResponse(w http.ResponseWriter) error
}

type UpdatePublisher200JSONResponse Publisher

func (response UpdatePublisher200JSONResponse) VisitUpdatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePublisher400JSONResponse ErrorResponse

func (response UpdatePublisher400JSONResponse) VisitUpdatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePublisher401Response struct {
}

func (response UpdatePublisher401Response) VisitUpdatePublisherResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdatePublisher404JSONResponse ErrorResponse

func (response UpdatePublisher404JSONResponse) VisitUpdatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePublisher500JSONResponse ErrorResponse

func (response UpdatePublisher500JSONResponse) VisitUpdatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListNodesForPublisherRequestObject struct {
	PublisherId string `json:"publisherId"`
}

type ListNodesForPublisherResponseObject interface {
	VisitListNodesForPublisherResponse(w http.ResponseWriter) error
}

type ListNodesForPublisher200JSONResponse []Node

func (response ListNodesForPublisher200JSONResponse) VisitListNodesForPublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListNodesForPublisher400JSONResponse ErrorResponse

func (response ListNodesForPublisher400JSONResponse) VisitListNodesForPublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListNodesForPublisher500JSONResponse ErrorResponse

func (response ListNodesForPublisher500JSONResponse) VisitListNodesForPublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateNodeRequestObject struct {
	PublisherId string `json:"publisherId"`
	Body        *CreateNodeJSONRequestBody
}

type CreateNodeResponseObject interface {
	VisitCreateNodeResponse(w http.ResponseWriter) error
}

type CreateNode201JSONResponse Node

func (response CreateNode201JSONResponse) VisitCreateNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateNode400JSONResponse ErrorResponse

func (response CreateNode400JSONResponse) VisitCreateNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateNode401Response struct {
}

func (response CreateNode401Response) VisitCreateNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateNode500JSONResponse ErrorResponse

func (response CreateNode500JSONResponse) VisitCreateNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeRequestObject struct {
	PublisherId string `json:"publisherId"`
	NodeId      string `json:"nodeId"`
}

type DeleteNodeResponseObject interface {
	VisitDeleteNodeResponse(w http.ResponseWriter) error
}

type DeleteNode204Response struct {
}

func (response DeleteNode204Response) VisitDeleteNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteNode403JSONResponse ErrorResponse

func (response DeleteNode403JSONResponse) VisitDeleteNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNode404JSONResponse ErrorResponse

func (response DeleteNode404JSONResponse) VisitDeleteNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNode500JSONResponse ErrorResponse

func (response DeleteNode500JSONResponse) VisitDeleteNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeRequestObject struct {
	PublisherId string `json:"publisherId"`
	NodeId      string `json:"nodeId"`
	Body        *UpdateNodeJSONRequestBody
}

type UpdateNodeResponseObject interface {
	VisitUpdateNodeResponse(w http.ResponseWriter) error
}

type UpdateNode200JSONResponse Node

func (response UpdateNode200JSONResponse) VisitUpdateNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNode400JSONResponse ErrorResponse

func (response UpdateNode400JSONResponse) VisitUpdateNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNode401Response struct {
}

func (response UpdateNode401Response) VisitUpdateNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateNode403JSONResponse ErrorResponse

func (response UpdateNode403JSONResponse) VisitUpdateNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNode404JSONResponse ErrorResponse

func (response UpdateNode404JSONResponse) VisitUpdateNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNode500JSONResponse ErrorResponse

func (response UpdateNode500JSONResponse) VisitUpdateNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPermissionOnPublisherNodesRequestObject struct {
	PublisherId string `json:"publisherId"`
	NodeId      string `json:"nodeId"`
}

type GetPermissionOnPublisherNodesResponseObject interface {
	VisitGetPermissionOnPublisherNodesResponse(w http.ResponseWriter) error
}

type GetPermissionOnPublisherNodes200JSONResponse struct {
	CanEdit *bool `json:"canEdit,omitempty"`
}

func (response GetPermissionOnPublisherNodes200JSONResponse) VisitGetPermissionOnPublisherNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPermissionOnPublisherNodes400JSONResponse ErrorResponse

func (response GetPermissionOnPublisherNodes400JSONResponse) VisitGetPermissionOnPublisherNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPermissionOnPublisherNodes500JSONResponse ErrorResponse

func (response GetPermissionOnPublisherNodes500JSONResponse) VisitGetPermissionOnPublisherNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PublishNodeVersionRequestObject struct {
	PublisherId string `json:"publisherId"`
	NodeId      string `json:"nodeId"`
	Body        *PublishNodeVersionJSONRequestBody
}

type PublishNodeVersionResponseObject interface {
	VisitPublishNodeVersionResponse(w http.ResponseWriter) error
}

type PublishNodeVersion201JSONResponse struct {
	NodeVersion *NodeVersion `json:"node_version,omitempty"`

	// SignedUrl The signed URL to upload the node version token.
	SignedUrl *string `json:"signedUrl,omitempty"`
}

func (response PublishNodeVersion201JSONResponse) VisitPublishNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PublishNodeVersion400JSONResponse ErrorResponse

func (response PublishNodeVersion400JSONResponse) VisitPublishNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PublishNodeVersion403JSONResponse ErrorResponse

func (response PublishNodeVersion403JSONResponse) VisitPublishNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PublishNodeVersion500JSONResponse ErrorResponse

func (response PublishNodeVersion500JSONResponse) VisitPublishNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeVersionRequestObject struct {
	PublisherId string `json:"publisherId"`
	NodeId      string `json:"nodeId"`
	VersionId   string `json:"versionId"`
}

type DeleteNodeVersionResponseObject interface {
	VisitDeleteNodeVersionResponse(w http.ResponseWriter) error
}

type DeleteNodeVersion204Response struct {
}

func (response DeleteNodeVersion204Response) VisitDeleteNodeVersionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteNodeVersion404JSONResponse Error

func (response DeleteNodeVersion404JSONResponse) VisitDeleteNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeVersionRequestObject struct {
	PublisherId string `json:"publisherId"`
	NodeId      string `json:"nodeId"`
	VersionId   string `json:"versionId"`
	Body        *UpdateNodeVersionJSONRequestBody
}

type UpdateNodeVersionResponseObject interface {
	VisitUpdateNodeVersionResponse(w http.ResponseWriter) error
}

type UpdateNodeVersion200JSONResponse NodeVersion

func (response UpdateNodeVersion200JSONResponse) VisitUpdateNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeVersion400JSONResponse ErrorResponse

func (response UpdateNodeVersion400JSONResponse) VisitUpdateNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeVersion401Response struct {
}

func (response UpdateNodeVersion401Response) VisitUpdateNodeVersionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateNodeVersion403JSONResponse ErrorResponse

func (response UpdateNodeVersion403JSONResponse) VisitUpdateNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeVersion404JSONResponse ErrorResponse

func (response UpdateNodeVersion404JSONResponse) VisitUpdateNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeVersion500JSONResponse ErrorResponse

func (response UpdateNodeVersion500JSONResponse) VisitUpdateNodeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPermissionOnPublisherRequestObject struct {
	PublisherId string `json:"publisherId"`
}

type GetPermissionOnPublisherResponseObject interface {
	VisitGetPermissionOnPublisherResponse(w http.ResponseWriter) error
}

type GetPermissionOnPublisher200JSONResponse struct {
	CanEdit *bool `json:"canEdit,omitempty"`
}

func (response GetPermissionOnPublisher200JSONResponse) VisitGetPermissionOnPublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPermissionOnPublisher400JSONResponse ErrorResponse

func (response GetPermissionOnPublisher400JSONResponse) VisitGetPermissionOnPublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPermissionOnPublisher500JSONResponse ErrorResponse

func (response GetPermissionOnPublisher500JSONResponse) VisitGetPermissionOnPublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalAccessTokensRequestObject struct {
	PublisherId string `json:"publisherId"`
}

type ListPersonalAccessTokensResponseObject interface {
	VisitListPersonalAccessTokensResponse(w http.ResponseWriter) error
}

type ListPersonalAccessTokens200JSONResponse []PersonalAccessToken

func (response ListPersonalAccessTokens200JSONResponse) VisitListPersonalAccessTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalAccessTokens403JSONResponse ErrorResponse

func (response ListPersonalAccessTokens403JSONResponse) VisitListPersonalAccessTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalAccessTokens404JSONResponse ErrorResponse

func (response ListPersonalAccessTokens404JSONResponse) VisitListPersonalAccessTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalAccessTokens500JSONResponse ErrorResponse

func (response ListPersonalAccessTokens500JSONResponse) VisitListPersonalAccessTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalAccessTokenRequestObject struct {
	PublisherId string `json:"publisherId"`
	Body        *CreatePersonalAccessTokenJSONRequestBody
}

type CreatePersonalAccessTokenResponseObject interface {
	VisitCreatePersonalAccessTokenResponse(w http.ResponseWriter) error
}

type CreatePersonalAccessToken201JSONResponse struct {
	// Token The newly created personal access token.
	Token *string `json:"token,omitempty"`
}

func (response CreatePersonalAccessToken201JSONResponse) VisitCreatePersonalAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalAccessToken400JSONResponse ErrorResponse

func (response CreatePersonalAccessToken400JSONResponse) VisitCreatePersonalAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalAccessToken403JSONResponse ErrorResponse

func (response CreatePersonalAccessToken403JSONResponse) VisitCreatePersonalAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalAccessToken500JSONResponse ErrorResponse

func (response CreatePersonalAccessToken500JSONResponse) VisitCreatePersonalAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalAccessTokenRequestObject struct {
	PublisherId string `json:"publisherId"`
	TokenId     string `json:"tokenId"`
}

type DeletePersonalAccessTokenResponseObject interface {
	VisitDeletePersonalAccessTokenResponse(w http.ResponseWriter) error
}

type DeletePersonalAccessToken204Response struct {
}

func (response DeletePersonalAccessToken204Response) VisitDeletePersonalAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePersonalAccessToken403JSONResponse ErrorResponse

func (response DeletePersonalAccessToken403JSONResponse) VisitDeletePersonalAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalAccessToken404JSONResponse ErrorResponse

func (response DeletePersonalAccessToken404JSONResponse) VisitDeletePersonalAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalAccessToken500JSONResponse ErrorResponse

func (response DeletePersonalAccessToken500JSONResponse) VisitDeletePersonalAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUploadArtifactRequestObject struct {
	Body *PostUploadArtifactJSONRequestBody
}

type PostUploadArtifactResponseObject interface {
	VisitPostUploadArtifactResponse(w http.ResponseWriter) error
}

type PostUploadArtifact200JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response PostUploadArtifact200JSONResponse) VisitPostUploadArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUploadArtifact400Response struct {
}

func (response PostUploadArtifact400Response) VisitPostUploadArtifactResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostUploadArtifact500Response struct {
}

func (response PostUploadArtifact500Response) VisitPostUploadArtifactResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUser401Response struct {
}

func (response GetUser401Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetUser404Response struct {
}

func (response GetUser404Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListPublishersForUserRequestObject struct {
}

type ListPublishersForUserResponseObject interface {
	VisitListPublishersForUserResponse(w http.ResponseWriter) error
}

type ListPublishersForUser200JSONResponse []Publisher

func (response ListPublishersForUser200JSONResponse) VisitListPublishersForUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPublishersForUser400JSONResponse ErrorResponse

func (response ListPublishersForUser400JSONResponse) VisitListPublishersForUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListPublishersForUser500JSONResponse ErrorResponse

func (response ListPublishersForUser500JSONResponse) VisitListPublishersForUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve all distinct branches for a given repo
	// (GET /branch)
	GetBranch(ctx context.Context, request GetBranchRequestObject) (GetBranchResponseObject, error)
	// Retrieve CI data for a given commit
	// (GET /gitcommit)
	GetGitcommit(ctx context.Context, request GetGitcommitRequestObject) (GetGitcommitResponseObject, error)
	// Retrieves a list of nodes
	// (GET /nodes)
	ListAllNodes(ctx context.Context, request ListAllNodesRequestObject) (ListAllNodesResponseObject, error)
	// Retrieves a list of nodes
	// (GET /nodes/search)
	SearchNodes(ctx context.Context, request SearchNodesRequestObject) (SearchNodesResponseObject, error)
	// Retrieve a specific node by ID
	// (GET /nodes/{nodeId})
	GetNode(ctx context.Context, request GetNodeRequestObject) (GetNodeResponseObject, error)
	// Returns a node version to be installed.
	// (GET /nodes/{nodeId}/install)
	InstallNode(ctx context.Context, request InstallNodeRequestObject) (InstallNodeResponseObject, error)
	// List all versions of a node
	// (GET /nodes/{nodeId}/versions)
	ListNodeVersions(ctx context.Context, request ListNodeVersionsRequestObject) (ListNodeVersionsResponseObject, error)
	// Retrieve a specific version of a node
	// (GET /nodes/{nodeId}/versions/{versionId})
	GetNodeVersion(ctx context.Context, request GetNodeVersionRequestObject) (GetNodeVersionResponseObject, error)
	// Retrieve all publishers
	// (GET /publishers)
	ListPublishers(ctx context.Context, request ListPublishersRequestObject) (ListPublishersResponseObject, error)
	// Create a new publisher
	// (POST /publishers)
	CreatePublisher(ctx context.Context, request CreatePublisherRequestObject) (CreatePublisherResponseObject, error)
	// Validate if a publisher username is available
	// (GET /publishers/validate)
	ValidatePublisher(ctx context.Context, request ValidatePublisherRequestObject) (ValidatePublisherResponseObject, error)
	// Delete a publisher
	// (DELETE /publishers/{publisherId})
	DeletePublisher(ctx context.Context, request DeletePublisherRequestObject) (DeletePublisherResponseObject, error)
	// Retrieve a publisher by ID
	// (GET /publishers/{publisherId})
	GetPublisher(ctx context.Context, request GetPublisherRequestObject) (GetPublisherResponseObject, error)
	// Update a publisher
	// (PUT /publishers/{publisherId})
	UpdatePublisher(ctx context.Context, request UpdatePublisherRequestObject) (UpdatePublisherResponseObject, error)
	// Retrieve all nodes
	// (GET /publishers/{publisherId}/nodes)
	ListNodesForPublisher(ctx context.Context, request ListNodesForPublisherRequestObject) (ListNodesForPublisherResponseObject, error)
	// Create a new custom node
	// (POST /publishers/{publisherId}/nodes)
	CreateNode(ctx context.Context, request CreateNodeRequestObject) (CreateNodeResponseObject, error)
	// Delete a specific node
	// (DELETE /publishers/{publisherId}/nodes/{nodeId})
	DeleteNode(ctx context.Context, request DeleteNodeRequestObject) (DeleteNodeResponseObject, error)
	// Update a specific node
	// (PUT /publishers/{publisherId}/nodes/{nodeId})
	UpdateNode(ctx context.Context, request UpdateNodeRequestObject) (UpdateNodeResponseObject, error)
	// Retrieve permissions the user has for a given publisher
	// (GET /publishers/{publisherId}/nodes/{nodeId}/permissions)
	GetPermissionOnPublisherNodes(ctx context.Context, request GetPermissionOnPublisherNodesRequestObject) (GetPermissionOnPublisherNodesResponseObject, error)
	// Publish a new version of a node
	// (POST /publishers/{publisherId}/nodes/{nodeId}/versions)
	PublishNodeVersion(ctx context.Context, request PublishNodeVersionRequestObject) (PublishNodeVersionResponseObject, error)
	// Unpublish (delete) a specific version of a node
	// (DELETE /publishers/{publisherId}/nodes/{nodeId}/versions/{versionId})
	DeleteNodeVersion(ctx context.Context, request DeleteNodeVersionRequestObject) (DeleteNodeVersionResponseObject, error)
	// Update changelog and deprecation status of a node version
	// (PUT /publishers/{publisherId}/nodes/{nodeId}/versions/{versionId})
	UpdateNodeVersion(ctx context.Context, request UpdateNodeVersionRequestObject) (UpdateNodeVersionResponseObject, error)
	// Retrieve permissions the user has for a given publisher
	// (GET /publishers/{publisherId}/permissions)
	GetPermissionOnPublisher(ctx context.Context, request GetPermissionOnPublisherRequestObject) (GetPermissionOnPublisherResponseObject, error)
	// Retrieve all personal access tokens for a publisher
	// (GET /publishers/{publisherId}/tokens)
	ListPersonalAccessTokens(ctx context.Context, request ListPersonalAccessTokensRequestObject) (ListPersonalAccessTokensResponseObject, error)
	// Create a new personal access token
	// (POST /publishers/{publisherId}/tokens)
	CreatePersonalAccessToken(ctx context.Context, request CreatePersonalAccessTokenRequestObject) (CreatePersonalAccessTokenResponseObject, error)
	// Delete a specific personal access token
	// (DELETE /publishers/{publisherId}/tokens/{tokenId})
	DeletePersonalAccessToken(ctx context.Context, request DeletePersonalAccessTokenRequestObject) (DeletePersonalAccessTokenResponseObject, error)
	// Receive artifacts (output files) from the ComfyUI GitHub Action
	// (POST /upload-artifact)
	PostUploadArtifact(ctx context.Context, request PostUploadArtifactRequestObject) (PostUploadArtifactResponseObject, error)
	// Get information about the calling user.
	// (GET /users)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Retrieve all publishers for a given user
	// (GET /users/publishers/)
	ListPublishersForUser(ctx context.Context, request ListPublishersForUserRequestObject) (ListPublishersForUserResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetBranch operation middleware
func (sh *strictHandler) GetBranch(ctx echo.Context, params GetBranchParams) error {
	var request GetBranchRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBranch(ctx.Request().Context(), request.(GetBranchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBranch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetBranchResponseObject); ok {
		return validResponse.VisitGetBranchResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetGitcommit operation middleware
func (sh *strictHandler) GetGitcommit(ctx echo.Context, params GetGitcommitParams) error {
	var request GetGitcommitRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGitcommit(ctx.Request().Context(), request.(GetGitcommitRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGitcommit")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetGitcommitResponseObject); ok {
		return validResponse.VisitGetGitcommitResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListAllNodes operation middleware
func (sh *strictHandler) ListAllNodes(ctx echo.Context, params ListAllNodesParams) error {
	var request ListAllNodesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAllNodes(ctx.Request().Context(), request.(ListAllNodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAllNodes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListAllNodesResponseObject); ok {
		return validResponse.VisitListAllNodesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SearchNodes operation middleware
func (sh *strictHandler) SearchNodes(ctx echo.Context, params SearchNodesParams) error {
	var request SearchNodesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SearchNodes(ctx.Request().Context(), request.(SearchNodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchNodes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SearchNodesResponseObject); ok {
		return validResponse.VisitSearchNodesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetNode operation middleware
func (sh *strictHandler) GetNode(ctx echo.Context, nodeId string) error {
	var request GetNodeRequestObject

	request.NodeId = nodeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNode(ctx.Request().Context(), request.(GetNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetNodeResponseObject); ok {
		return validResponse.VisitGetNodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// InstallNode operation middleware
func (sh *strictHandler) InstallNode(ctx echo.Context, nodeId string, params InstallNodeParams) error {
	var request InstallNodeRequestObject

	request.NodeId = nodeId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InstallNode(ctx.Request().Context(), request.(InstallNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InstallNode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(InstallNodeResponseObject); ok {
		return validResponse.VisitInstallNodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListNodeVersions operation middleware
func (sh *strictHandler) ListNodeVersions(ctx echo.Context, nodeId string) error {
	var request ListNodeVersionsRequestObject

	request.NodeId = nodeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListNodeVersions(ctx.Request().Context(), request.(ListNodeVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListNodeVersions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListNodeVersionsResponseObject); ok {
		return validResponse.VisitListNodeVersionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetNodeVersion operation middleware
func (sh *strictHandler) GetNodeVersion(ctx echo.Context, nodeId string, versionId string) error {
	var request GetNodeVersionRequestObject

	request.NodeId = nodeId
	request.VersionId = versionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeVersion(ctx.Request().Context(), request.(GetNodeVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetNodeVersionResponseObject); ok {
		return validResponse.VisitGetNodeVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListPublishers operation middleware
func (sh *strictHandler) ListPublishers(ctx echo.Context) error {
	var request ListPublishersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListPublishers(ctx.Request().Context(), request.(ListPublishersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPublishers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListPublishersResponseObject); ok {
		return validResponse.VisitListPublishersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreatePublisher operation middleware
func (sh *strictHandler) CreatePublisher(ctx echo.Context) error {
	var request CreatePublisherRequestObject

	var body CreatePublisherJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePublisher(ctx.Request().Context(), request.(CreatePublisherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePublisher")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreatePublisherResponseObject); ok {
		return validResponse.VisitCreatePublisherResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ValidatePublisher operation middleware
func (sh *strictHandler) ValidatePublisher(ctx echo.Context, params ValidatePublisherParams) error {
	var request ValidatePublisherRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidatePublisher(ctx.Request().Context(), request.(ValidatePublisherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidatePublisher")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ValidatePublisherResponseObject); ok {
		return validResponse.VisitValidatePublisherResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeletePublisher operation middleware
func (sh *strictHandler) DeletePublisher(ctx echo.Context, publisherId string) error {
	var request DeletePublisherRequestObject

	request.PublisherId = publisherId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePublisher(ctx.Request().Context(), request.(DeletePublisherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePublisher")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePublisherResponseObject); ok {
		return validResponse.VisitDeletePublisherResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPublisher operation middleware
func (sh *strictHandler) GetPublisher(ctx echo.Context, publisherId string) error {
	var request GetPublisherRequestObject

	request.PublisherId = publisherId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPublisher(ctx.Request().Context(), request.(GetPublisherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPublisher")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPublisherResponseObject); ok {
		return validResponse.VisitGetPublisherResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdatePublisher operation middleware
func (sh *strictHandler) UpdatePublisher(ctx echo.Context, publisherId string) error {
	var request UpdatePublisherRequestObject

	request.PublisherId = publisherId

	var body UpdatePublisherJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePublisher(ctx.Request().Context(), request.(UpdatePublisherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePublisher")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdatePublisherResponseObject); ok {
		return validResponse.VisitUpdatePublisherResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListNodesForPublisher operation middleware
func (sh *strictHandler) ListNodesForPublisher(ctx echo.Context, publisherId string) error {
	var request ListNodesForPublisherRequestObject

	request.PublisherId = publisherId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListNodesForPublisher(ctx.Request().Context(), request.(ListNodesForPublisherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListNodesForPublisher")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListNodesForPublisherResponseObject); ok {
		return validResponse.VisitListNodesForPublisherResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateNode operation middleware
func (sh *strictHandler) CreateNode(ctx echo.Context, publisherId string) error {
	var request CreateNodeRequestObject

	request.PublisherId = publisherId

	var body CreateNodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNode(ctx.Request().Context(), request.(CreateNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateNodeResponseObject); ok {
		return validResponse.VisitCreateNodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteNode operation middleware
func (sh *strictHandler) DeleteNode(ctx echo.Context, publisherId string, nodeId string) error {
	var request DeleteNodeRequestObject

	request.PublisherId = publisherId
	request.NodeId = nodeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteNode(ctx.Request().Context(), request.(DeleteNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteNode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteNodeResponseObject); ok {
		return validResponse.VisitDeleteNodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateNode operation middleware
func (sh *strictHandler) UpdateNode(ctx echo.Context, publisherId string, nodeId string) error {
	var request UpdateNodeRequestObject

	request.PublisherId = publisherId
	request.NodeId = nodeId

	var body UpdateNodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateNode(ctx.Request().Context(), request.(UpdateNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateNode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateNodeResponseObject); ok {
		return validResponse.VisitUpdateNodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPermissionOnPublisherNodes operation middleware
func (sh *strictHandler) GetPermissionOnPublisherNodes(ctx echo.Context, publisherId string, nodeId string) error {
	var request GetPermissionOnPublisherNodesRequestObject

	request.PublisherId = publisherId
	request.NodeId = nodeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPermissionOnPublisherNodes(ctx.Request().Context(), request.(GetPermissionOnPublisherNodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPermissionOnPublisherNodes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPermissionOnPublisherNodesResponseObject); ok {
		return validResponse.VisitGetPermissionOnPublisherNodesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PublishNodeVersion operation middleware
func (sh *strictHandler) PublishNodeVersion(ctx echo.Context, publisherId string, nodeId string) error {
	var request PublishNodeVersionRequestObject

	request.PublisherId = publisherId
	request.NodeId = nodeId

	var body PublishNodeVersionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PublishNodeVersion(ctx.Request().Context(), request.(PublishNodeVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PublishNodeVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PublishNodeVersionResponseObject); ok {
		return validResponse.VisitPublishNodeVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteNodeVersion operation middleware
func (sh *strictHandler) DeleteNodeVersion(ctx echo.Context, publisherId string, nodeId string, versionId string) error {
	var request DeleteNodeVersionRequestObject

	request.PublisherId = publisherId
	request.NodeId = nodeId
	request.VersionId = versionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteNodeVersion(ctx.Request().Context(), request.(DeleteNodeVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteNodeVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteNodeVersionResponseObject); ok {
		return validResponse.VisitDeleteNodeVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateNodeVersion operation middleware
func (sh *strictHandler) UpdateNodeVersion(ctx echo.Context, publisherId string, nodeId string, versionId string) error {
	var request UpdateNodeVersionRequestObject

	request.PublisherId = publisherId
	request.NodeId = nodeId
	request.VersionId = versionId

	var body UpdateNodeVersionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateNodeVersion(ctx.Request().Context(), request.(UpdateNodeVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateNodeVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateNodeVersionResponseObject); ok {
		return validResponse.VisitUpdateNodeVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPermissionOnPublisher operation middleware
func (sh *strictHandler) GetPermissionOnPublisher(ctx echo.Context, publisherId string) error {
	var request GetPermissionOnPublisherRequestObject

	request.PublisherId = publisherId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPermissionOnPublisher(ctx.Request().Context(), request.(GetPermissionOnPublisherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPermissionOnPublisher")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPermissionOnPublisherResponseObject); ok {
		return validResponse.VisitGetPermissionOnPublisherResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListPersonalAccessTokens operation middleware
func (sh *strictHandler) ListPersonalAccessTokens(ctx echo.Context, publisherId string) error {
	var request ListPersonalAccessTokensRequestObject

	request.PublisherId = publisherId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListPersonalAccessTokens(ctx.Request().Context(), request.(ListPersonalAccessTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPersonalAccessTokens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListPersonalAccessTokensResponseObject); ok {
		return validResponse.VisitListPersonalAccessTokensResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreatePersonalAccessToken operation middleware
func (sh *strictHandler) CreatePersonalAccessToken(ctx echo.Context, publisherId string) error {
	var request CreatePersonalAccessTokenRequestObject

	request.PublisherId = publisherId

	var body CreatePersonalAccessTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePersonalAccessToken(ctx.Request().Context(), request.(CreatePersonalAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePersonalAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreatePersonalAccessTokenResponseObject); ok {
		return validResponse.VisitCreatePersonalAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeletePersonalAccessToken operation middleware
func (sh *strictHandler) DeletePersonalAccessToken(ctx echo.Context, publisherId string, tokenId string) error {
	var request DeletePersonalAccessTokenRequestObject

	request.PublisherId = publisherId
	request.TokenId = tokenId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePersonalAccessToken(ctx.Request().Context(), request.(DeletePersonalAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePersonalAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePersonalAccessTokenResponseObject); ok {
		return validResponse.VisitDeletePersonalAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUploadArtifact operation middleware
func (sh *strictHandler) PostUploadArtifact(ctx echo.Context) error {
	var request PostUploadArtifactRequestObject

	var body PostUploadArtifactJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUploadArtifact(ctx.Request().Context(), request.(PostUploadArtifactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUploadArtifact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUploadArtifactResponseObject); ok {
		return validResponse.VisitPostUploadArtifactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx echo.Context) error {
	var request GetUserRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.Request().Context(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		return validResponse.VisitGetUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListPublishersForUser operation middleware
func (sh *strictHandler) ListPublishersForUser(ctx echo.Context) error {
	var request ListPublishersForUserRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListPublishersForUser(ctx.Request().Context(), request.(ListPublishersForUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPublishersForUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListPublishersForUserResponseObject); ok {
		return validResponse.VisitListPublishersForUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
