// Code generated by ent, DO NOT EDIT.

package nodereview

import (
	"registry-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldLTE(FieldID, id))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldEQ(FieldNodeID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldEQ(FieldUserID, v))
}

// Star applies equality check predicate on the "star" field. It's identical to StarEQ.
func Star(v int) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldEQ(FieldStar, v))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldContains(FieldNodeID, v))
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldHasPrefix(FieldNodeID, v))
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldHasSuffix(FieldNodeID, v))
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldEqualFold(FieldNodeID, v))
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldContainsFold(FieldNodeID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldContainsFold(FieldUserID, v))
}

// StarEQ applies the EQ predicate on the "star" field.
func StarEQ(v int) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldEQ(FieldStar, v))
}

// StarNEQ applies the NEQ predicate on the "star" field.
func StarNEQ(v int) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldNEQ(FieldStar, v))
}

// StarIn applies the In predicate on the "star" field.
func StarIn(vs ...int) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldIn(FieldStar, vs...))
}

// StarNotIn applies the NotIn predicate on the "star" field.
func StarNotIn(vs ...int) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldNotIn(FieldStar, vs...))
}

// StarGT applies the GT predicate on the "star" field.
func StarGT(v int) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldGT(FieldStar, v))
}

// StarGTE applies the GTE predicate on the "star" field.
func StarGTE(v int) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldGTE(FieldStar, v))
}

// StarLT applies the LT predicate on the "star" field.
func StarLT(v int) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldLT(FieldStar, v))
}

// StarLTE applies the LTE predicate on the "star" field.
func StarLTE(v int) predicate.NodeReview {
	return predicate.NodeReview(sql.FieldLTE(FieldStar, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.NodeReview {
	return predicate.NodeReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.NodeReview {
	return predicate.NodeReview(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.NodeReview {
	return predicate.NodeReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.NodeReview {
	return predicate.NodeReview(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NodeReview) predicate.NodeReview {
	return predicate.NodeReview(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NodeReview) predicate.NodeReview {
	return predicate.NodeReview(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NodeReview) predicate.NodeReview {
	return predicate.NodeReview(sql.NotPredicates(p))
}
