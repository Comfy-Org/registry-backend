// Code generated by ent, DO NOT EDIT.

package storagefile

import (
	"registry-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldUpdateTime, v))
}

// BucketName applies equality check predicate on the "bucket_name" field. It's identical to BucketNameEQ.
func BucketName(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldBucketName, v))
}

// ObjectName applies equality check predicate on the "object_name" field. It's identical to ObjectNameEQ.
func ObjectName(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldObjectName, v))
}

// FilePath applies equality check predicate on the "file_path" field. It's identical to FilePathEQ.
func FilePath(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldFilePath, v))
}

// FileType applies equality check predicate on the "file_type" field. It's identical to FileTypeEQ.
func FileType(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldFileType, v))
}

// FileURL applies equality check predicate on the "file_url" field. It's identical to FileURLEQ.
func FileURL(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldFileURL, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLTE(FieldUpdateTime, v))
}

// BucketNameEQ applies the EQ predicate on the "bucket_name" field.
func BucketNameEQ(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldBucketName, v))
}

// BucketNameNEQ applies the NEQ predicate on the "bucket_name" field.
func BucketNameNEQ(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNEQ(FieldBucketName, v))
}

// BucketNameIn applies the In predicate on the "bucket_name" field.
func BucketNameIn(vs ...string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldIn(FieldBucketName, vs...))
}

// BucketNameNotIn applies the NotIn predicate on the "bucket_name" field.
func BucketNameNotIn(vs ...string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNotIn(FieldBucketName, vs...))
}

// BucketNameGT applies the GT predicate on the "bucket_name" field.
func BucketNameGT(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGT(FieldBucketName, v))
}

// BucketNameGTE applies the GTE predicate on the "bucket_name" field.
func BucketNameGTE(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGTE(FieldBucketName, v))
}

// BucketNameLT applies the LT predicate on the "bucket_name" field.
func BucketNameLT(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLT(FieldBucketName, v))
}

// BucketNameLTE applies the LTE predicate on the "bucket_name" field.
func BucketNameLTE(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLTE(FieldBucketName, v))
}

// BucketNameContains applies the Contains predicate on the "bucket_name" field.
func BucketNameContains(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldContains(FieldBucketName, v))
}

// BucketNameHasPrefix applies the HasPrefix predicate on the "bucket_name" field.
func BucketNameHasPrefix(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldHasPrefix(FieldBucketName, v))
}

// BucketNameHasSuffix applies the HasSuffix predicate on the "bucket_name" field.
func BucketNameHasSuffix(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldHasSuffix(FieldBucketName, v))
}

// BucketNameEqualFold applies the EqualFold predicate on the "bucket_name" field.
func BucketNameEqualFold(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEqualFold(FieldBucketName, v))
}

// BucketNameContainsFold applies the ContainsFold predicate on the "bucket_name" field.
func BucketNameContainsFold(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldContainsFold(FieldBucketName, v))
}

// ObjectNameEQ applies the EQ predicate on the "object_name" field.
func ObjectNameEQ(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldObjectName, v))
}

// ObjectNameNEQ applies the NEQ predicate on the "object_name" field.
func ObjectNameNEQ(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNEQ(FieldObjectName, v))
}

// ObjectNameIn applies the In predicate on the "object_name" field.
func ObjectNameIn(vs ...string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldIn(FieldObjectName, vs...))
}

// ObjectNameNotIn applies the NotIn predicate on the "object_name" field.
func ObjectNameNotIn(vs ...string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNotIn(FieldObjectName, vs...))
}

// ObjectNameGT applies the GT predicate on the "object_name" field.
func ObjectNameGT(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGT(FieldObjectName, v))
}

// ObjectNameGTE applies the GTE predicate on the "object_name" field.
func ObjectNameGTE(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGTE(FieldObjectName, v))
}

// ObjectNameLT applies the LT predicate on the "object_name" field.
func ObjectNameLT(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLT(FieldObjectName, v))
}

// ObjectNameLTE applies the LTE predicate on the "object_name" field.
func ObjectNameLTE(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLTE(FieldObjectName, v))
}

// ObjectNameContains applies the Contains predicate on the "object_name" field.
func ObjectNameContains(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldContains(FieldObjectName, v))
}

// ObjectNameHasPrefix applies the HasPrefix predicate on the "object_name" field.
func ObjectNameHasPrefix(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldHasPrefix(FieldObjectName, v))
}

// ObjectNameHasSuffix applies the HasSuffix predicate on the "object_name" field.
func ObjectNameHasSuffix(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldHasSuffix(FieldObjectName, v))
}

// ObjectNameIsNil applies the IsNil predicate on the "object_name" field.
func ObjectNameIsNil() predicate.StorageFile {
	return predicate.StorageFile(sql.FieldIsNull(FieldObjectName))
}

// ObjectNameNotNil applies the NotNil predicate on the "object_name" field.
func ObjectNameNotNil() predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNotNull(FieldObjectName))
}

// ObjectNameEqualFold applies the EqualFold predicate on the "object_name" field.
func ObjectNameEqualFold(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEqualFold(FieldObjectName, v))
}

// ObjectNameContainsFold applies the ContainsFold predicate on the "object_name" field.
func ObjectNameContainsFold(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldContainsFold(FieldObjectName, v))
}

// FilePathEQ applies the EQ predicate on the "file_path" field.
func FilePathEQ(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldFilePath, v))
}

// FilePathNEQ applies the NEQ predicate on the "file_path" field.
func FilePathNEQ(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNEQ(FieldFilePath, v))
}

// FilePathIn applies the In predicate on the "file_path" field.
func FilePathIn(vs ...string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldIn(FieldFilePath, vs...))
}

// FilePathNotIn applies the NotIn predicate on the "file_path" field.
func FilePathNotIn(vs ...string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNotIn(FieldFilePath, vs...))
}

// FilePathGT applies the GT predicate on the "file_path" field.
func FilePathGT(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGT(FieldFilePath, v))
}

// FilePathGTE applies the GTE predicate on the "file_path" field.
func FilePathGTE(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGTE(FieldFilePath, v))
}

// FilePathLT applies the LT predicate on the "file_path" field.
func FilePathLT(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLT(FieldFilePath, v))
}

// FilePathLTE applies the LTE predicate on the "file_path" field.
func FilePathLTE(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLTE(FieldFilePath, v))
}

// FilePathContains applies the Contains predicate on the "file_path" field.
func FilePathContains(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldContains(FieldFilePath, v))
}

// FilePathHasPrefix applies the HasPrefix predicate on the "file_path" field.
func FilePathHasPrefix(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldHasPrefix(FieldFilePath, v))
}

// FilePathHasSuffix applies the HasSuffix predicate on the "file_path" field.
func FilePathHasSuffix(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldHasSuffix(FieldFilePath, v))
}

// FilePathEqualFold applies the EqualFold predicate on the "file_path" field.
func FilePathEqualFold(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEqualFold(FieldFilePath, v))
}

// FilePathContainsFold applies the ContainsFold predicate on the "file_path" field.
func FilePathContainsFold(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldContainsFold(FieldFilePath, v))
}

// FileTypeEQ applies the EQ predicate on the "file_type" field.
func FileTypeEQ(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldFileType, v))
}

// FileTypeNEQ applies the NEQ predicate on the "file_type" field.
func FileTypeNEQ(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNEQ(FieldFileType, v))
}

// FileTypeIn applies the In predicate on the "file_type" field.
func FileTypeIn(vs ...string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldIn(FieldFileType, vs...))
}

// FileTypeNotIn applies the NotIn predicate on the "file_type" field.
func FileTypeNotIn(vs ...string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNotIn(FieldFileType, vs...))
}

// FileTypeGT applies the GT predicate on the "file_type" field.
func FileTypeGT(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGT(FieldFileType, v))
}

// FileTypeGTE applies the GTE predicate on the "file_type" field.
func FileTypeGTE(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGTE(FieldFileType, v))
}

// FileTypeLT applies the LT predicate on the "file_type" field.
func FileTypeLT(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLT(FieldFileType, v))
}

// FileTypeLTE applies the LTE predicate on the "file_type" field.
func FileTypeLTE(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLTE(FieldFileType, v))
}

// FileTypeContains applies the Contains predicate on the "file_type" field.
func FileTypeContains(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldContains(FieldFileType, v))
}

// FileTypeHasPrefix applies the HasPrefix predicate on the "file_type" field.
func FileTypeHasPrefix(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldHasPrefix(FieldFileType, v))
}

// FileTypeHasSuffix applies the HasSuffix predicate on the "file_type" field.
func FileTypeHasSuffix(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldHasSuffix(FieldFileType, v))
}

// FileTypeEqualFold applies the EqualFold predicate on the "file_type" field.
func FileTypeEqualFold(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEqualFold(FieldFileType, v))
}

// FileTypeContainsFold applies the ContainsFold predicate on the "file_type" field.
func FileTypeContainsFold(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldContainsFold(FieldFileType, v))
}

// FileURLEQ applies the EQ predicate on the "file_url" field.
func FileURLEQ(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEQ(FieldFileURL, v))
}

// FileURLNEQ applies the NEQ predicate on the "file_url" field.
func FileURLNEQ(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNEQ(FieldFileURL, v))
}

// FileURLIn applies the In predicate on the "file_url" field.
func FileURLIn(vs ...string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldIn(FieldFileURL, vs...))
}

// FileURLNotIn applies the NotIn predicate on the "file_url" field.
func FileURLNotIn(vs ...string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNotIn(FieldFileURL, vs...))
}

// FileURLGT applies the GT predicate on the "file_url" field.
func FileURLGT(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGT(FieldFileURL, v))
}

// FileURLGTE applies the GTE predicate on the "file_url" field.
func FileURLGTE(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldGTE(FieldFileURL, v))
}

// FileURLLT applies the LT predicate on the "file_url" field.
func FileURLLT(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLT(FieldFileURL, v))
}

// FileURLLTE applies the LTE predicate on the "file_url" field.
func FileURLLTE(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldLTE(FieldFileURL, v))
}

// FileURLContains applies the Contains predicate on the "file_url" field.
func FileURLContains(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldContains(FieldFileURL, v))
}

// FileURLHasPrefix applies the HasPrefix predicate on the "file_url" field.
func FileURLHasPrefix(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldHasPrefix(FieldFileURL, v))
}

// FileURLHasSuffix applies the HasSuffix predicate on the "file_url" field.
func FileURLHasSuffix(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldHasSuffix(FieldFileURL, v))
}

// FileURLIsNil applies the IsNil predicate on the "file_url" field.
func FileURLIsNil() predicate.StorageFile {
	return predicate.StorageFile(sql.FieldIsNull(FieldFileURL))
}

// FileURLNotNil applies the NotNil predicate on the "file_url" field.
func FileURLNotNil() predicate.StorageFile {
	return predicate.StorageFile(sql.FieldNotNull(FieldFileURL))
}

// FileURLEqualFold applies the EqualFold predicate on the "file_url" field.
func FileURLEqualFold(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldEqualFold(FieldFileURL, v))
}

// FileURLContainsFold applies the ContainsFold predicate on the "file_url" field.
func FileURLContainsFold(v string) predicate.StorageFile {
	return predicate.StorageFile(sql.FieldContainsFold(FieldFileURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StorageFile) predicate.StorageFile {
	return predicate.StorageFile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StorageFile) predicate.StorageFile {
	return predicate.StorageFile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StorageFile) predicate.StorageFile {
	return predicate.StorageFile(sql.NotPredicates(p))
}
