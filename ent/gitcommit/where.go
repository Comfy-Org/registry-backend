// Code generated by ent, DO NOT EDIT.

package gitcommit

import (
	"registry-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldUpdateTime, v))
}

// CommitHash applies equality check predicate on the "commit_hash" field. It's identical to CommitHashEQ.
func CommitHash(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldCommitHash, v))
}

// BranchName applies equality check predicate on the "branch_name" field. It's identical to BranchNameEQ.
func BranchName(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldBranchName, v))
}

// RepoName applies equality check predicate on the "repo_name" field. It's identical to RepoNameEQ.
func RepoName(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldRepoName, v))
}

// CommitMessage applies equality check predicate on the "commit_message" field. It's identical to CommitMessageEQ.
func CommitMessage(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldCommitMessage, v))
}

// CommitTimestamp applies equality check predicate on the "commit_timestamp" field. It's identical to CommitTimestampEQ.
func CommitTimestamp(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldCommitTimestamp, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldAuthor, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldTimestamp, v))
}

// PrNumber applies equality check predicate on the "pr_number" field. It's identical to PrNumberEQ.
func PrNumber(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldPrNumber, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldUpdateTime, v))
}

// CommitHashEQ applies the EQ predicate on the "commit_hash" field.
func CommitHashEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldCommitHash, v))
}

// CommitHashNEQ applies the NEQ predicate on the "commit_hash" field.
func CommitHashNEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldCommitHash, v))
}

// CommitHashIn applies the In predicate on the "commit_hash" field.
func CommitHashIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldCommitHash, vs...))
}

// CommitHashNotIn applies the NotIn predicate on the "commit_hash" field.
func CommitHashNotIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldCommitHash, vs...))
}

// CommitHashGT applies the GT predicate on the "commit_hash" field.
func CommitHashGT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldCommitHash, v))
}

// CommitHashGTE applies the GTE predicate on the "commit_hash" field.
func CommitHashGTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldCommitHash, v))
}

// CommitHashLT applies the LT predicate on the "commit_hash" field.
func CommitHashLT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldCommitHash, v))
}

// CommitHashLTE applies the LTE predicate on the "commit_hash" field.
func CommitHashLTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldCommitHash, v))
}

// CommitHashContains applies the Contains predicate on the "commit_hash" field.
func CommitHashContains(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContains(FieldCommitHash, v))
}

// CommitHashHasPrefix applies the HasPrefix predicate on the "commit_hash" field.
func CommitHashHasPrefix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasPrefix(FieldCommitHash, v))
}

// CommitHashHasSuffix applies the HasSuffix predicate on the "commit_hash" field.
func CommitHashHasSuffix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasSuffix(FieldCommitHash, v))
}

// CommitHashEqualFold applies the EqualFold predicate on the "commit_hash" field.
func CommitHashEqualFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEqualFold(FieldCommitHash, v))
}

// CommitHashContainsFold applies the ContainsFold predicate on the "commit_hash" field.
func CommitHashContainsFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContainsFold(FieldCommitHash, v))
}

// BranchNameEQ applies the EQ predicate on the "branch_name" field.
func BranchNameEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldBranchName, v))
}

// BranchNameNEQ applies the NEQ predicate on the "branch_name" field.
func BranchNameNEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldBranchName, v))
}

// BranchNameIn applies the In predicate on the "branch_name" field.
func BranchNameIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldBranchName, vs...))
}

// BranchNameNotIn applies the NotIn predicate on the "branch_name" field.
func BranchNameNotIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldBranchName, vs...))
}

// BranchNameGT applies the GT predicate on the "branch_name" field.
func BranchNameGT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldBranchName, v))
}

// BranchNameGTE applies the GTE predicate on the "branch_name" field.
func BranchNameGTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldBranchName, v))
}

// BranchNameLT applies the LT predicate on the "branch_name" field.
func BranchNameLT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldBranchName, v))
}

// BranchNameLTE applies the LTE predicate on the "branch_name" field.
func BranchNameLTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldBranchName, v))
}

// BranchNameContains applies the Contains predicate on the "branch_name" field.
func BranchNameContains(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContains(FieldBranchName, v))
}

// BranchNameHasPrefix applies the HasPrefix predicate on the "branch_name" field.
func BranchNameHasPrefix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasPrefix(FieldBranchName, v))
}

// BranchNameHasSuffix applies the HasSuffix predicate on the "branch_name" field.
func BranchNameHasSuffix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasSuffix(FieldBranchName, v))
}

// BranchNameEqualFold applies the EqualFold predicate on the "branch_name" field.
func BranchNameEqualFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEqualFold(FieldBranchName, v))
}

// BranchNameContainsFold applies the ContainsFold predicate on the "branch_name" field.
func BranchNameContainsFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContainsFold(FieldBranchName, v))
}

// RepoNameEQ applies the EQ predicate on the "repo_name" field.
func RepoNameEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldRepoName, v))
}

// RepoNameNEQ applies the NEQ predicate on the "repo_name" field.
func RepoNameNEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldRepoName, v))
}

// RepoNameIn applies the In predicate on the "repo_name" field.
func RepoNameIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldRepoName, vs...))
}

// RepoNameNotIn applies the NotIn predicate on the "repo_name" field.
func RepoNameNotIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldRepoName, vs...))
}

// RepoNameGT applies the GT predicate on the "repo_name" field.
func RepoNameGT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldRepoName, v))
}

// RepoNameGTE applies the GTE predicate on the "repo_name" field.
func RepoNameGTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldRepoName, v))
}

// RepoNameLT applies the LT predicate on the "repo_name" field.
func RepoNameLT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldRepoName, v))
}

// RepoNameLTE applies the LTE predicate on the "repo_name" field.
func RepoNameLTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldRepoName, v))
}

// RepoNameContains applies the Contains predicate on the "repo_name" field.
func RepoNameContains(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContains(FieldRepoName, v))
}

// RepoNameHasPrefix applies the HasPrefix predicate on the "repo_name" field.
func RepoNameHasPrefix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasPrefix(FieldRepoName, v))
}

// RepoNameHasSuffix applies the HasSuffix predicate on the "repo_name" field.
func RepoNameHasSuffix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasSuffix(FieldRepoName, v))
}

// RepoNameEqualFold applies the EqualFold predicate on the "repo_name" field.
func RepoNameEqualFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEqualFold(FieldRepoName, v))
}

// RepoNameContainsFold applies the ContainsFold predicate on the "repo_name" field.
func RepoNameContainsFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContainsFold(FieldRepoName, v))
}

// CommitMessageEQ applies the EQ predicate on the "commit_message" field.
func CommitMessageEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldCommitMessage, v))
}

// CommitMessageNEQ applies the NEQ predicate on the "commit_message" field.
func CommitMessageNEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldCommitMessage, v))
}

// CommitMessageIn applies the In predicate on the "commit_message" field.
func CommitMessageIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldCommitMessage, vs...))
}

// CommitMessageNotIn applies the NotIn predicate on the "commit_message" field.
func CommitMessageNotIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldCommitMessage, vs...))
}

// CommitMessageGT applies the GT predicate on the "commit_message" field.
func CommitMessageGT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldCommitMessage, v))
}

// CommitMessageGTE applies the GTE predicate on the "commit_message" field.
func CommitMessageGTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldCommitMessage, v))
}

// CommitMessageLT applies the LT predicate on the "commit_message" field.
func CommitMessageLT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldCommitMessage, v))
}

// CommitMessageLTE applies the LTE predicate on the "commit_message" field.
func CommitMessageLTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldCommitMessage, v))
}

// CommitMessageContains applies the Contains predicate on the "commit_message" field.
func CommitMessageContains(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContains(FieldCommitMessage, v))
}

// CommitMessageHasPrefix applies the HasPrefix predicate on the "commit_message" field.
func CommitMessageHasPrefix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasPrefix(FieldCommitMessage, v))
}

// CommitMessageHasSuffix applies the HasSuffix predicate on the "commit_message" field.
func CommitMessageHasSuffix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasSuffix(FieldCommitMessage, v))
}

// CommitMessageEqualFold applies the EqualFold predicate on the "commit_message" field.
func CommitMessageEqualFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEqualFold(FieldCommitMessage, v))
}

// CommitMessageContainsFold applies the ContainsFold predicate on the "commit_message" field.
func CommitMessageContainsFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContainsFold(FieldCommitMessage, v))
}

// CommitTimestampEQ applies the EQ predicate on the "commit_timestamp" field.
func CommitTimestampEQ(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldCommitTimestamp, v))
}

// CommitTimestampNEQ applies the NEQ predicate on the "commit_timestamp" field.
func CommitTimestampNEQ(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldCommitTimestamp, v))
}

// CommitTimestampIn applies the In predicate on the "commit_timestamp" field.
func CommitTimestampIn(vs ...time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldCommitTimestamp, vs...))
}

// CommitTimestampNotIn applies the NotIn predicate on the "commit_timestamp" field.
func CommitTimestampNotIn(vs ...time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldCommitTimestamp, vs...))
}

// CommitTimestampGT applies the GT predicate on the "commit_timestamp" field.
func CommitTimestampGT(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldCommitTimestamp, v))
}

// CommitTimestampGTE applies the GTE predicate on the "commit_timestamp" field.
func CommitTimestampGTE(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldCommitTimestamp, v))
}

// CommitTimestampLT applies the LT predicate on the "commit_timestamp" field.
func CommitTimestampLT(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldCommitTimestamp, v))
}

// CommitTimestampLTE applies the LTE predicate on the "commit_timestamp" field.
func CommitTimestampLTE(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldCommitTimestamp, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorIsNil applies the IsNil predicate on the "author" field.
func AuthorIsNil() predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIsNull(FieldAuthor))
}

// AuthorNotNil applies the NotNil predicate on the "author" field.
func AuthorNotNil() predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotNull(FieldAuthor))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContainsFold(FieldAuthor, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldTimestamp, v))
}

// TimestampIsNil applies the IsNil predicate on the "timestamp" field.
func TimestampIsNil() predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIsNull(FieldTimestamp))
}

// TimestampNotNil applies the NotNil predicate on the "timestamp" field.
func TimestampNotNil() predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotNull(FieldTimestamp))
}

// PrNumberEQ applies the EQ predicate on the "pr_number" field.
func PrNumberEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldPrNumber, v))
}

// PrNumberNEQ applies the NEQ predicate on the "pr_number" field.
func PrNumberNEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldPrNumber, v))
}

// PrNumberIn applies the In predicate on the "pr_number" field.
func PrNumberIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldPrNumber, vs...))
}

// PrNumberNotIn applies the NotIn predicate on the "pr_number" field.
func PrNumberNotIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldPrNumber, vs...))
}

// PrNumberGT applies the GT predicate on the "pr_number" field.
func PrNumberGT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldPrNumber, v))
}

// PrNumberGTE applies the GTE predicate on the "pr_number" field.
func PrNumberGTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldPrNumber, v))
}

// PrNumberLT applies the LT predicate on the "pr_number" field.
func PrNumberLT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldPrNumber, v))
}

// PrNumberLTE applies the LTE predicate on the "pr_number" field.
func PrNumberLTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldPrNumber, v))
}

// PrNumberContains applies the Contains predicate on the "pr_number" field.
func PrNumberContains(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContains(FieldPrNumber, v))
}

// PrNumberHasPrefix applies the HasPrefix predicate on the "pr_number" field.
func PrNumberHasPrefix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasPrefix(FieldPrNumber, v))
}

// PrNumberHasSuffix applies the HasSuffix predicate on the "pr_number" field.
func PrNumberHasSuffix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasSuffix(FieldPrNumber, v))
}

// PrNumberIsNil applies the IsNil predicate on the "pr_number" field.
func PrNumberIsNil() predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIsNull(FieldPrNumber))
}

// PrNumberNotNil applies the NotNil predicate on the "pr_number" field.
func PrNumberNotNil() predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotNull(FieldPrNumber))
}

// PrNumberEqualFold applies the EqualFold predicate on the "pr_number" field.
func PrNumberEqualFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEqualFold(FieldPrNumber, v))
}

// PrNumberContainsFold applies the ContainsFold predicate on the "pr_number" field.
func PrNumberContainsFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContainsFold(FieldPrNumber, v))
}

// HasResults applies the HasEdge predicate on the "results" edge.
func HasResults() predicate.GitCommit {
	return predicate.GitCommit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResultsTable, ResultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResultsWith applies the HasEdge predicate on the "results" edge with a given conditions (other predicates).
func HasResultsWith(preds ...predicate.CIWorkflowResult) predicate.GitCommit {
	return predicate.GitCommit(func(s *sql.Selector) {
		step := newResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GitCommit) predicate.GitCommit {
	return predicate.GitCommit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GitCommit) predicate.GitCommit {
	return predicate.GitCommit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GitCommit) predicate.GitCommit {
	return predicate.GitCommit(sql.NotPredicates(p))
}
