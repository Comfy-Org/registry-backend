// Code generated by ent, DO NOT EDIT.

package comfynode

import (
	"registry-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldContainsFold(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldUpdateTime, v))
}

// NodeVersionID applies equality check predicate on the "node_version_id" field. It's identical to NodeVersionIDEQ.
func NodeVersionID(v uuid.UUID) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldNodeVersionID, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldCategory, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldDescription, v))
}

// InputTypes applies equality check predicate on the "input_types" field. It's identical to InputTypesEQ.
func InputTypes(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldInputTypes, v))
}

// Deprecated applies equality check predicate on the "deprecated" field. It's identical to DeprecatedEQ.
func Deprecated(v bool) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldDeprecated, v))
}

// Experimental applies equality check predicate on the "experimental" field. It's identical to ExperimentalEQ.
func Experimental(v bool) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldExperimental, v))
}

// Function applies equality check predicate on the "function" field. It's identical to FunctionEQ.
func Function(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldFunction, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLTE(FieldUpdateTime, v))
}

// NodeVersionIDEQ applies the EQ predicate on the "node_version_id" field.
func NodeVersionIDEQ(v uuid.UUID) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldNodeVersionID, v))
}

// NodeVersionIDNEQ applies the NEQ predicate on the "node_version_id" field.
func NodeVersionIDNEQ(v uuid.UUID) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNEQ(FieldNodeVersionID, v))
}

// NodeVersionIDIn applies the In predicate on the "node_version_id" field.
func NodeVersionIDIn(vs ...uuid.UUID) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldIn(FieldNodeVersionID, vs...))
}

// NodeVersionIDNotIn applies the NotIn predicate on the "node_version_id" field.
func NodeVersionIDNotIn(vs ...uuid.UUID) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNotIn(FieldNodeVersionID, vs...))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldContainsFold(FieldCategory, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldContainsFold(FieldDescription, v))
}

// InputTypesEQ applies the EQ predicate on the "input_types" field.
func InputTypesEQ(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldInputTypes, v))
}

// InputTypesNEQ applies the NEQ predicate on the "input_types" field.
func InputTypesNEQ(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNEQ(FieldInputTypes, v))
}

// InputTypesIn applies the In predicate on the "input_types" field.
func InputTypesIn(vs ...string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldIn(FieldInputTypes, vs...))
}

// InputTypesNotIn applies the NotIn predicate on the "input_types" field.
func InputTypesNotIn(vs ...string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNotIn(FieldInputTypes, vs...))
}

// InputTypesGT applies the GT predicate on the "input_types" field.
func InputTypesGT(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGT(FieldInputTypes, v))
}

// InputTypesGTE applies the GTE predicate on the "input_types" field.
func InputTypesGTE(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGTE(FieldInputTypes, v))
}

// InputTypesLT applies the LT predicate on the "input_types" field.
func InputTypesLT(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLT(FieldInputTypes, v))
}

// InputTypesLTE applies the LTE predicate on the "input_types" field.
func InputTypesLTE(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLTE(FieldInputTypes, v))
}

// InputTypesContains applies the Contains predicate on the "input_types" field.
func InputTypesContains(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldContains(FieldInputTypes, v))
}

// InputTypesHasPrefix applies the HasPrefix predicate on the "input_types" field.
func InputTypesHasPrefix(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldHasPrefix(FieldInputTypes, v))
}

// InputTypesHasSuffix applies the HasSuffix predicate on the "input_types" field.
func InputTypesHasSuffix(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldHasSuffix(FieldInputTypes, v))
}

// InputTypesIsNil applies the IsNil predicate on the "input_types" field.
func InputTypesIsNil() predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldIsNull(FieldInputTypes))
}

// InputTypesNotNil applies the NotNil predicate on the "input_types" field.
func InputTypesNotNil() predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNotNull(FieldInputTypes))
}

// InputTypesEqualFold applies the EqualFold predicate on the "input_types" field.
func InputTypesEqualFold(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEqualFold(FieldInputTypes, v))
}

// InputTypesContainsFold applies the ContainsFold predicate on the "input_types" field.
func InputTypesContainsFold(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldContainsFold(FieldInputTypes, v))
}

// DeprecatedEQ applies the EQ predicate on the "deprecated" field.
func DeprecatedEQ(v bool) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldDeprecated, v))
}

// DeprecatedNEQ applies the NEQ predicate on the "deprecated" field.
func DeprecatedNEQ(v bool) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNEQ(FieldDeprecated, v))
}

// ExperimentalEQ applies the EQ predicate on the "experimental" field.
func ExperimentalEQ(v bool) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldExperimental, v))
}

// ExperimentalNEQ applies the NEQ predicate on the "experimental" field.
func ExperimentalNEQ(v bool) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNEQ(FieldExperimental, v))
}

// FunctionEQ applies the EQ predicate on the "function" field.
func FunctionEQ(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEQ(FieldFunction, v))
}

// FunctionNEQ applies the NEQ predicate on the "function" field.
func FunctionNEQ(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNEQ(FieldFunction, v))
}

// FunctionIn applies the In predicate on the "function" field.
func FunctionIn(vs ...string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldIn(FieldFunction, vs...))
}

// FunctionNotIn applies the NotIn predicate on the "function" field.
func FunctionNotIn(vs ...string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldNotIn(FieldFunction, vs...))
}

// FunctionGT applies the GT predicate on the "function" field.
func FunctionGT(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGT(FieldFunction, v))
}

// FunctionGTE applies the GTE predicate on the "function" field.
func FunctionGTE(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldGTE(FieldFunction, v))
}

// FunctionLT applies the LT predicate on the "function" field.
func FunctionLT(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLT(FieldFunction, v))
}

// FunctionLTE applies the LTE predicate on the "function" field.
func FunctionLTE(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldLTE(FieldFunction, v))
}

// FunctionContains applies the Contains predicate on the "function" field.
func FunctionContains(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldContains(FieldFunction, v))
}

// FunctionHasPrefix applies the HasPrefix predicate on the "function" field.
func FunctionHasPrefix(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldHasPrefix(FieldFunction, v))
}

// FunctionHasSuffix applies the HasSuffix predicate on the "function" field.
func FunctionHasSuffix(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldHasSuffix(FieldFunction, v))
}

// FunctionEqualFold applies the EqualFold predicate on the "function" field.
func FunctionEqualFold(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldEqualFold(FieldFunction, v))
}

// FunctionContainsFold applies the ContainsFold predicate on the "function" field.
func FunctionContainsFold(v string) predicate.ComfyNode {
	return predicate.ComfyNode(sql.FieldContainsFold(FieldFunction, v))
}

// HasVersions applies the HasEdge predicate on the "versions" edge.
func HasVersions() predicate.ComfyNode {
	return predicate.ComfyNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VersionsTable, VersionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVersionsWith applies the HasEdge predicate on the "versions" edge with a given conditions (other predicates).
func HasVersionsWith(preds ...predicate.NodeVersion) predicate.ComfyNode {
	return predicate.ComfyNode(func(s *sql.Selector) {
		step := newVersionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ComfyNode) predicate.ComfyNode {
	return predicate.ComfyNode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ComfyNode) predicate.ComfyNode {
	return predicate.ComfyNode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ComfyNode) predicate.ComfyNode {
	return predicate.ComfyNode(sql.NotPredicates(p))
}
