// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"registry-backend/ent/node"
	"registry-backend/ent/nodeversion"
	"registry-backend/ent/publisher"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// NodeCreate is the builder for creating a Node entity.
type NodeCreate struct {
	config
	mutation *NodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (nc *NodeCreate) SetCreateTime(t time.Time) *NodeCreate {
	nc.mutation.SetCreateTime(t)
	return nc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (nc *NodeCreate) SetNillableCreateTime(t *time.Time) *NodeCreate {
	if t != nil {
		nc.SetCreateTime(*t)
	}
	return nc
}

// SetUpdateTime sets the "update_time" field.
func (nc *NodeCreate) SetUpdateTime(t time.Time) *NodeCreate {
	nc.mutation.SetUpdateTime(t)
	return nc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (nc *NodeCreate) SetNillableUpdateTime(t *time.Time) *NodeCreate {
	if t != nil {
		nc.SetUpdateTime(*t)
	}
	return nc
}

// SetPublisherID sets the "publisher_id" field.
func (nc *NodeCreate) SetPublisherID(s string) *NodeCreate {
	nc.mutation.SetPublisherID(s)
	return nc
}

// SetName sets the "name" field.
func (nc *NodeCreate) SetName(s string) *NodeCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetDescription sets the "description" field.
func (nc *NodeCreate) SetDescription(s string) *NodeCreate {
	nc.mutation.SetDescription(s)
	return nc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nc *NodeCreate) SetNillableDescription(s *string) *NodeCreate {
	if s != nil {
		nc.SetDescription(*s)
	}
	return nc
}

// SetAuthor sets the "author" field.
func (nc *NodeCreate) SetAuthor(s string) *NodeCreate {
	nc.mutation.SetAuthor(s)
	return nc
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (nc *NodeCreate) SetNillableAuthor(s *string) *NodeCreate {
	if s != nil {
		nc.SetAuthor(*s)
	}
	return nc
}

// SetLicense sets the "license" field.
func (nc *NodeCreate) SetLicense(s string) *NodeCreate {
	nc.mutation.SetLicense(s)
	return nc
}

// SetRepositoryURL sets the "repository_url" field.
func (nc *NodeCreate) SetRepositoryURL(s string) *NodeCreate {
	nc.mutation.SetRepositoryURL(s)
	return nc
}

// SetIconURL sets the "icon_url" field.
func (nc *NodeCreate) SetIconURL(s string) *NodeCreate {
	nc.mutation.SetIconURL(s)
	return nc
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (nc *NodeCreate) SetNillableIconURL(s *string) *NodeCreate {
	if s != nil {
		nc.SetIconURL(*s)
	}
	return nc
}

// SetTags sets the "tags" field.
func (nc *NodeCreate) SetTags(s []string) *NodeCreate {
	nc.mutation.SetTags(s)
	return nc
}

// SetID sets the "id" field.
func (nc *NodeCreate) SetID(s string) *NodeCreate {
	nc.mutation.SetID(s)
	return nc
}

// SetPublisher sets the "publisher" edge to the Publisher entity.
func (nc *NodeCreate) SetPublisher(p *Publisher) *NodeCreate {
	return nc.SetPublisherID(p.ID)
}

// AddVersionIDs adds the "versions" edge to the NodeVersion entity by IDs.
func (nc *NodeCreate) AddVersionIDs(ids ...uuid.UUID) *NodeCreate {
	nc.mutation.AddVersionIDs(ids...)
	return nc
}

// AddVersions adds the "versions" edges to the NodeVersion entity.
func (nc *NodeCreate) AddVersions(n ...*NodeVersion) *NodeCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nc.AddVersionIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nc *NodeCreate) Mutation() *NodeMutation {
	return nc.mutation
}

// Save creates the Node in the database.
func (nc *NodeCreate) Save(ctx context.Context) (*Node, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NodeCreate) SaveX(ctx context.Context) *Node {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NodeCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NodeCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NodeCreate) defaults() {
	if _, ok := nc.mutation.CreateTime(); !ok {
		v := node.DefaultCreateTime()
		nc.mutation.SetCreateTime(v)
	}
	if _, ok := nc.mutation.UpdateTime(); !ok {
		v := node.DefaultUpdateTime()
		nc.mutation.SetUpdateTime(v)
	}
	if _, ok := nc.mutation.Tags(); !ok {
		v := node.DefaultTags
		nc.mutation.SetTags(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NodeCreate) check() error {
	if _, ok := nc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Node.create_time"`)}
	}
	if _, ok := nc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Node.update_time"`)}
	}
	if _, ok := nc.mutation.PublisherID(); !ok {
		return &ValidationError{Name: "publisher_id", err: errors.New(`ent: missing required field "Node.publisher_id"`)}
	}
	if _, ok := nc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Node.name"`)}
	}
	if _, ok := nc.mutation.License(); !ok {
		return &ValidationError{Name: "license", err: errors.New(`ent: missing required field "Node.license"`)}
	}
	if _, ok := nc.mutation.RepositoryURL(); !ok {
		return &ValidationError{Name: "repository_url", err: errors.New(`ent: missing required field "Node.repository_url"`)}
	}
	if _, ok := nc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Node.tags"`)}
	}
	if _, ok := nc.mutation.PublisherID(); !ok {
		return &ValidationError{Name: "publisher", err: errors.New(`ent: missing required edge "Node.publisher"`)}
	}
	return nil
}

func (nc *NodeCreate) sqlSave(ctx context.Context) (*Node, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Node.ID type: %T", _spec.ID.Value)
		}
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NodeCreate) createSpec() (*Node, *sqlgraph.CreateSpec) {
	var (
		_node = &Node{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(node.Table, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	)
	_spec.OnConflict = nc.conflict
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.CreateTime(); ok {
		_spec.SetField(node.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := nc.mutation.UpdateTime(); ok {
		_spec.SetField(node.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := nc.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nc.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nc.mutation.Author(); ok {
		_spec.SetField(node.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := nc.mutation.License(); ok {
		_spec.SetField(node.FieldLicense, field.TypeString, value)
		_node.License = value
	}
	if value, ok := nc.mutation.RepositoryURL(); ok {
		_spec.SetField(node.FieldRepositoryURL, field.TypeString, value)
		_node.RepositoryURL = value
	}
	if value, ok := nc.mutation.IconURL(); ok {
		_spec.SetField(node.FieldIconURL, field.TypeString, value)
		_node.IconURL = value
	}
	if value, ok := nc.mutation.Tags(); ok {
		_spec.SetField(node.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if nodes := nc.mutation.PublisherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   node.PublisherTable,
			Columns: []string{node.PublisherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publisher.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PublisherID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.VersionsTable,
			Columns: []string{node.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodeversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Node.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NodeUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (nc *NodeCreate) OnConflict(opts ...sql.ConflictOption) *NodeUpsertOne {
	nc.conflict = opts
	return &NodeUpsertOne{
		create: nc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Node.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nc *NodeCreate) OnConflictColumns(columns ...string) *NodeUpsertOne {
	nc.conflict = append(nc.conflict, sql.ConflictColumns(columns...))
	return &NodeUpsertOne{
		create: nc,
	}
}

type (
	// NodeUpsertOne is the builder for "upsert"-ing
	//  one Node node.
	NodeUpsertOne struct {
		create *NodeCreate
	}

	// NodeUpsert is the "OnConflict" setter.
	NodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *NodeUpsert) SetUpdateTime(v time.Time) *NodeUpsert {
	u.Set(node.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *NodeUpsert) UpdateUpdateTime() *NodeUpsert {
	u.SetExcluded(node.FieldUpdateTime)
	return u
}

// SetPublisherID sets the "publisher_id" field.
func (u *NodeUpsert) SetPublisherID(v string) *NodeUpsert {
	u.Set(node.FieldPublisherID, v)
	return u
}

// UpdatePublisherID sets the "publisher_id" field to the value that was provided on create.
func (u *NodeUpsert) UpdatePublisherID() *NodeUpsert {
	u.SetExcluded(node.FieldPublisherID)
	return u
}

// SetName sets the "name" field.
func (u *NodeUpsert) SetName(v string) *NodeUpsert {
	u.Set(node.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NodeUpsert) UpdateName() *NodeUpsert {
	u.SetExcluded(node.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *NodeUpsert) SetDescription(v string) *NodeUpsert {
	u.Set(node.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NodeUpsert) UpdateDescription() *NodeUpsert {
	u.SetExcluded(node.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *NodeUpsert) ClearDescription() *NodeUpsert {
	u.SetNull(node.FieldDescription)
	return u
}

// SetAuthor sets the "author" field.
func (u *NodeUpsert) SetAuthor(v string) *NodeUpsert {
	u.Set(node.FieldAuthor, v)
	return u
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *NodeUpsert) UpdateAuthor() *NodeUpsert {
	u.SetExcluded(node.FieldAuthor)
	return u
}

// ClearAuthor clears the value of the "author" field.
func (u *NodeUpsert) ClearAuthor() *NodeUpsert {
	u.SetNull(node.FieldAuthor)
	return u
}

// SetLicense sets the "license" field.
func (u *NodeUpsert) SetLicense(v string) *NodeUpsert {
	u.Set(node.FieldLicense, v)
	return u
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *NodeUpsert) UpdateLicense() *NodeUpsert {
	u.SetExcluded(node.FieldLicense)
	return u
}

// SetRepositoryURL sets the "repository_url" field.
func (u *NodeUpsert) SetRepositoryURL(v string) *NodeUpsert {
	u.Set(node.FieldRepositoryURL, v)
	return u
}

// UpdateRepositoryURL sets the "repository_url" field to the value that was provided on create.
func (u *NodeUpsert) UpdateRepositoryURL() *NodeUpsert {
	u.SetExcluded(node.FieldRepositoryURL)
	return u
}

// SetIconURL sets the "icon_url" field.
func (u *NodeUpsert) SetIconURL(v string) *NodeUpsert {
	u.Set(node.FieldIconURL, v)
	return u
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *NodeUpsert) UpdateIconURL() *NodeUpsert {
	u.SetExcluded(node.FieldIconURL)
	return u
}

// ClearIconURL clears the value of the "icon_url" field.
func (u *NodeUpsert) ClearIconURL() *NodeUpsert {
	u.SetNull(node.FieldIconURL)
	return u
}

// SetTags sets the "tags" field.
func (u *NodeUpsert) SetTags(v []string) *NodeUpsert {
	u.Set(node.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *NodeUpsert) UpdateTags() *NodeUpsert {
	u.SetExcluded(node.FieldTags)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Node.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(node.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NodeUpsertOne) UpdateNewValues() *NodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(node.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(node.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Node.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NodeUpsertOne) Ignore() *NodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NodeUpsertOne) DoNothing() *NodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NodeCreate.OnConflict
// documentation for more info.
func (u *NodeUpsertOne) Update(set func(*NodeUpsert)) *NodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *NodeUpsertOne) SetUpdateTime(v time.Time) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateUpdateTime() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetPublisherID sets the "publisher_id" field.
func (u *NodeUpsertOne) SetPublisherID(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetPublisherID(v)
	})
}

// UpdatePublisherID sets the "publisher_id" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdatePublisherID() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdatePublisherID()
	})
}

// SetName sets the "name" field.
func (u *NodeUpsertOne) SetName(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateName() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *NodeUpsertOne) SetDescription(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateDescription() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *NodeUpsertOne) ClearDescription() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.ClearDescription()
	})
}

// SetAuthor sets the "author" field.
func (u *NodeUpsertOne) SetAuthor(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetAuthor(v)
	})
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateAuthor() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateAuthor()
	})
}

// ClearAuthor clears the value of the "author" field.
func (u *NodeUpsertOne) ClearAuthor() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.ClearAuthor()
	})
}

// SetLicense sets the "license" field.
func (u *NodeUpsertOne) SetLicense(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetLicense(v)
	})
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateLicense() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateLicense()
	})
}

// SetRepositoryURL sets the "repository_url" field.
func (u *NodeUpsertOne) SetRepositoryURL(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetRepositoryURL(v)
	})
}

// UpdateRepositoryURL sets the "repository_url" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateRepositoryURL() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateRepositoryURL()
	})
}

// SetIconURL sets the "icon_url" field.
func (u *NodeUpsertOne) SetIconURL(v string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetIconURL(v)
	})
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateIconURL() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateIconURL()
	})
}

// ClearIconURL clears the value of the "icon_url" field.
func (u *NodeUpsertOne) ClearIconURL() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.ClearIconURL()
	})
}

// SetTags sets the "tags" field.
func (u *NodeUpsertOne) SetTags(v []string) *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *NodeUpsertOne) UpdateTags() *NodeUpsertOne {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateTags()
	})
}

// Exec executes the query.
func (u *NodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NodeUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: NodeUpsertOne.ID is not supported by MySQL driver. Use NodeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NodeUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NodeCreateBulk is the builder for creating many Node entities in bulk.
type NodeCreateBulk struct {
	config
	err      error
	builders []*NodeCreate
	conflict []sql.ConflictOption
}

// Save creates the Node entities in the database.
func (ncb *NodeCreateBulk) Save(ctx context.Context) ([]*Node, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Node, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NodeCreateBulk) SaveX(ctx context.Context) []*Node {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NodeCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Node.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NodeUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ncb *NodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *NodeUpsertBulk {
	ncb.conflict = opts
	return &NodeUpsertBulk{
		create: ncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Node.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ncb *NodeCreateBulk) OnConflictColumns(columns ...string) *NodeUpsertBulk {
	ncb.conflict = append(ncb.conflict, sql.ConflictColumns(columns...))
	return &NodeUpsertBulk{
		create: ncb,
	}
}

// NodeUpsertBulk is the builder for "upsert"-ing
// a bulk of Node nodes.
type NodeUpsertBulk struct {
	create *NodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Node.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(node.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NodeUpsertBulk) UpdateNewValues() *NodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(node.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(node.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Node.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NodeUpsertBulk) Ignore() *NodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NodeUpsertBulk) DoNothing() *NodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NodeCreateBulk.OnConflict
// documentation for more info.
func (u *NodeUpsertBulk) Update(set func(*NodeUpsert)) *NodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *NodeUpsertBulk) SetUpdateTime(v time.Time) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateUpdateTime() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetPublisherID sets the "publisher_id" field.
func (u *NodeUpsertBulk) SetPublisherID(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetPublisherID(v)
	})
}

// UpdatePublisherID sets the "publisher_id" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdatePublisherID() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdatePublisherID()
	})
}

// SetName sets the "name" field.
func (u *NodeUpsertBulk) SetName(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateName() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *NodeUpsertBulk) SetDescription(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateDescription() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *NodeUpsertBulk) ClearDescription() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.ClearDescription()
	})
}

// SetAuthor sets the "author" field.
func (u *NodeUpsertBulk) SetAuthor(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetAuthor(v)
	})
}

// UpdateAuthor sets the "author" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateAuthor() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateAuthor()
	})
}

// ClearAuthor clears the value of the "author" field.
func (u *NodeUpsertBulk) ClearAuthor() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.ClearAuthor()
	})
}

// SetLicense sets the "license" field.
func (u *NodeUpsertBulk) SetLicense(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetLicense(v)
	})
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateLicense() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateLicense()
	})
}

// SetRepositoryURL sets the "repository_url" field.
func (u *NodeUpsertBulk) SetRepositoryURL(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetRepositoryURL(v)
	})
}

// UpdateRepositoryURL sets the "repository_url" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateRepositoryURL() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateRepositoryURL()
	})
}

// SetIconURL sets the "icon_url" field.
func (u *NodeUpsertBulk) SetIconURL(v string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetIconURL(v)
	})
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateIconURL() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateIconURL()
	})
}

// ClearIconURL clears the value of the "icon_url" field.
func (u *NodeUpsertBulk) ClearIconURL() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.ClearIconURL()
	})
}

// SetTags sets the "tags" field.
func (u *NodeUpsertBulk) SetTags(v []string) *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *NodeUpsertBulk) UpdateTags() *NodeUpsertBulk {
	return u.Update(func(s *NodeUpsert) {
		s.UpdateTags()
	})
}

// Exec executes the query.
func (u *NodeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
