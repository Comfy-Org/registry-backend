// Code generated by ent, DO NOT EDIT.

package ciworkflowresult

import (
	"registry-backend/ent/predicate"
	"registry-backend/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldUpdateTime, v))
}

// OperatingSystem applies equality check predicate on the "operating_system" field. It's identical to OperatingSystemEQ.
func OperatingSystem(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldOperatingSystem, v))
}

// WorkflowName applies equality check predicate on the "workflow_name" field. It's identical to WorkflowNameEQ.
func WorkflowName(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldWorkflowName, v))
}

// RunID applies equality check predicate on the "run_id" field. It's identical to RunIDEQ.
func RunID(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldRunID, v))
}

// JobID applies equality check predicate on the "job_id" field. It's identical to JobIDEQ.
func JobID(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldJobID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldStatus, vc))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldEndTime, v))
}

// PythonVersion applies equality check predicate on the "python_version" field. It's identical to PythonVersionEQ.
func PythonVersion(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldPythonVersion, v))
}

// PytorchVersion applies equality check predicate on the "pytorch_version" field. It's identical to PytorchVersionEQ.
func PytorchVersion(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldPytorchVersion, v))
}

// CudaVersion applies equality check predicate on the "cuda_version" field. It's identical to CudaVersionEQ.
func CudaVersion(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldCudaVersion, v))
}

// ComfyRunFlags applies equality check predicate on the "comfy_run_flags" field. It's identical to ComfyRunFlagsEQ.
func ComfyRunFlags(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldComfyRunFlags, v))
}

// AvgVram applies equality check predicate on the "avg_vram" field. It's identical to AvgVramEQ.
func AvgVram(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldAvgVram, v))
}

// PeakVram applies equality check predicate on the "peak_vram" field. It's identical to PeakVramEQ.
func PeakVram(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldPeakVram, v))
}

// JobTriggerUser applies equality check predicate on the "job_trigger_user" field. It's identical to JobTriggerUserEQ.
func JobTriggerUser(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldJobTriggerUser, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldUpdateTime, v))
}

// OperatingSystemEQ applies the EQ predicate on the "operating_system" field.
func OperatingSystemEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldOperatingSystem, v))
}

// OperatingSystemNEQ applies the NEQ predicate on the "operating_system" field.
func OperatingSystemNEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldOperatingSystem, v))
}

// OperatingSystemIn applies the In predicate on the "operating_system" field.
func OperatingSystemIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldOperatingSystem, vs...))
}

// OperatingSystemNotIn applies the NotIn predicate on the "operating_system" field.
func OperatingSystemNotIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldOperatingSystem, vs...))
}

// OperatingSystemGT applies the GT predicate on the "operating_system" field.
func OperatingSystemGT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldOperatingSystem, v))
}

// OperatingSystemGTE applies the GTE predicate on the "operating_system" field.
func OperatingSystemGTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldOperatingSystem, v))
}

// OperatingSystemLT applies the LT predicate on the "operating_system" field.
func OperatingSystemLT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldOperatingSystem, v))
}

// OperatingSystemLTE applies the LTE predicate on the "operating_system" field.
func OperatingSystemLTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldOperatingSystem, v))
}

// OperatingSystemContains applies the Contains predicate on the "operating_system" field.
func OperatingSystemContains(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContains(FieldOperatingSystem, v))
}

// OperatingSystemHasPrefix applies the HasPrefix predicate on the "operating_system" field.
func OperatingSystemHasPrefix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasPrefix(FieldOperatingSystem, v))
}

// OperatingSystemHasSuffix applies the HasSuffix predicate on the "operating_system" field.
func OperatingSystemHasSuffix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasSuffix(FieldOperatingSystem, v))
}

// OperatingSystemEqualFold applies the EqualFold predicate on the "operating_system" field.
func OperatingSystemEqualFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEqualFold(FieldOperatingSystem, v))
}

// OperatingSystemContainsFold applies the ContainsFold predicate on the "operating_system" field.
func OperatingSystemContainsFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContainsFold(FieldOperatingSystem, v))
}

// WorkflowNameEQ applies the EQ predicate on the "workflow_name" field.
func WorkflowNameEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldWorkflowName, v))
}

// WorkflowNameNEQ applies the NEQ predicate on the "workflow_name" field.
func WorkflowNameNEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldWorkflowName, v))
}

// WorkflowNameIn applies the In predicate on the "workflow_name" field.
func WorkflowNameIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldWorkflowName, vs...))
}

// WorkflowNameNotIn applies the NotIn predicate on the "workflow_name" field.
func WorkflowNameNotIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldWorkflowName, vs...))
}

// WorkflowNameGT applies the GT predicate on the "workflow_name" field.
func WorkflowNameGT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldWorkflowName, v))
}

// WorkflowNameGTE applies the GTE predicate on the "workflow_name" field.
func WorkflowNameGTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldWorkflowName, v))
}

// WorkflowNameLT applies the LT predicate on the "workflow_name" field.
func WorkflowNameLT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldWorkflowName, v))
}

// WorkflowNameLTE applies the LTE predicate on the "workflow_name" field.
func WorkflowNameLTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldWorkflowName, v))
}

// WorkflowNameContains applies the Contains predicate on the "workflow_name" field.
func WorkflowNameContains(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContains(FieldWorkflowName, v))
}

// WorkflowNameHasPrefix applies the HasPrefix predicate on the "workflow_name" field.
func WorkflowNameHasPrefix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasPrefix(FieldWorkflowName, v))
}

// WorkflowNameHasSuffix applies the HasSuffix predicate on the "workflow_name" field.
func WorkflowNameHasSuffix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasSuffix(FieldWorkflowName, v))
}

// WorkflowNameIsNil applies the IsNil predicate on the "workflow_name" field.
func WorkflowNameIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldWorkflowName))
}

// WorkflowNameNotNil applies the NotNil predicate on the "workflow_name" field.
func WorkflowNameNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldWorkflowName))
}

// WorkflowNameEqualFold applies the EqualFold predicate on the "workflow_name" field.
func WorkflowNameEqualFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEqualFold(FieldWorkflowName, v))
}

// WorkflowNameContainsFold applies the ContainsFold predicate on the "workflow_name" field.
func WorkflowNameContainsFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContainsFold(FieldWorkflowName, v))
}

// RunIDEQ applies the EQ predicate on the "run_id" field.
func RunIDEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldRunID, v))
}

// RunIDNEQ applies the NEQ predicate on the "run_id" field.
func RunIDNEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldRunID, v))
}

// RunIDIn applies the In predicate on the "run_id" field.
func RunIDIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldRunID, vs...))
}

// RunIDNotIn applies the NotIn predicate on the "run_id" field.
func RunIDNotIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldRunID, vs...))
}

// RunIDGT applies the GT predicate on the "run_id" field.
func RunIDGT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldRunID, v))
}

// RunIDGTE applies the GTE predicate on the "run_id" field.
func RunIDGTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldRunID, v))
}

// RunIDLT applies the LT predicate on the "run_id" field.
func RunIDLT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldRunID, v))
}

// RunIDLTE applies the LTE predicate on the "run_id" field.
func RunIDLTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldRunID, v))
}

// RunIDContains applies the Contains predicate on the "run_id" field.
func RunIDContains(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContains(FieldRunID, v))
}

// RunIDHasPrefix applies the HasPrefix predicate on the "run_id" field.
func RunIDHasPrefix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasPrefix(FieldRunID, v))
}

// RunIDHasSuffix applies the HasSuffix predicate on the "run_id" field.
func RunIDHasSuffix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasSuffix(FieldRunID, v))
}

// RunIDIsNil applies the IsNil predicate on the "run_id" field.
func RunIDIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldRunID))
}

// RunIDNotNil applies the NotNil predicate on the "run_id" field.
func RunIDNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldRunID))
}

// RunIDEqualFold applies the EqualFold predicate on the "run_id" field.
func RunIDEqualFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEqualFold(FieldRunID, v))
}

// RunIDContainsFold applies the ContainsFold predicate on the "run_id" field.
func RunIDContainsFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContainsFold(FieldRunID, v))
}

// JobIDEQ applies the EQ predicate on the "job_id" field.
func JobIDEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldJobID, v))
}

// JobIDNEQ applies the NEQ predicate on the "job_id" field.
func JobIDNEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldJobID, v))
}

// JobIDIn applies the In predicate on the "job_id" field.
func JobIDIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldJobID, vs...))
}

// JobIDNotIn applies the NotIn predicate on the "job_id" field.
func JobIDNotIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldJobID, vs...))
}

// JobIDGT applies the GT predicate on the "job_id" field.
func JobIDGT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldJobID, v))
}

// JobIDGTE applies the GTE predicate on the "job_id" field.
func JobIDGTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldJobID, v))
}

// JobIDLT applies the LT predicate on the "job_id" field.
func JobIDLT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldJobID, v))
}

// JobIDLTE applies the LTE predicate on the "job_id" field.
func JobIDLTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldJobID, v))
}

// JobIDContains applies the Contains predicate on the "job_id" field.
func JobIDContains(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContains(FieldJobID, v))
}

// JobIDHasPrefix applies the HasPrefix predicate on the "job_id" field.
func JobIDHasPrefix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasPrefix(FieldJobID, v))
}

// JobIDHasSuffix applies the HasSuffix predicate on the "job_id" field.
func JobIDHasSuffix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasSuffix(FieldJobID, v))
}

// JobIDIsNil applies the IsNil predicate on the "job_id" field.
func JobIDIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldJobID))
}

// JobIDNotNil applies the NotNil predicate on the "job_id" field.
func JobIDNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldJobID))
}

// JobIDEqualFold applies the EqualFold predicate on the "job_id" field.
func JobIDEqualFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEqualFold(FieldJobID, v))
}

// JobIDContainsFold applies the ContainsFold predicate on the "job_id" field.
func JobIDContainsFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContainsFold(FieldJobID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CIWorkflowResult(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldStatus, vc))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldContains(FieldStatus, vc))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldHasPrefix(FieldStatus, vc))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldHasSuffix(FieldStatus, vc))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldEqualFold(FieldStatus, vc))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v schema.WorkflowRunStatusType) predicate.CIWorkflowResult {
	vc := string(v)
	return predicate.CIWorkflowResult(sql.FieldContainsFold(FieldStatus, vc))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldStartTime))
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldStartTime))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v int64) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldEndTime))
}

// PythonVersionEQ applies the EQ predicate on the "python_version" field.
func PythonVersionEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldPythonVersion, v))
}

// PythonVersionNEQ applies the NEQ predicate on the "python_version" field.
func PythonVersionNEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldPythonVersion, v))
}

// PythonVersionIn applies the In predicate on the "python_version" field.
func PythonVersionIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldPythonVersion, vs...))
}

// PythonVersionNotIn applies the NotIn predicate on the "python_version" field.
func PythonVersionNotIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldPythonVersion, vs...))
}

// PythonVersionGT applies the GT predicate on the "python_version" field.
func PythonVersionGT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldPythonVersion, v))
}

// PythonVersionGTE applies the GTE predicate on the "python_version" field.
func PythonVersionGTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldPythonVersion, v))
}

// PythonVersionLT applies the LT predicate on the "python_version" field.
func PythonVersionLT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldPythonVersion, v))
}

// PythonVersionLTE applies the LTE predicate on the "python_version" field.
func PythonVersionLTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldPythonVersion, v))
}

// PythonVersionContains applies the Contains predicate on the "python_version" field.
func PythonVersionContains(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContains(FieldPythonVersion, v))
}

// PythonVersionHasPrefix applies the HasPrefix predicate on the "python_version" field.
func PythonVersionHasPrefix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasPrefix(FieldPythonVersion, v))
}

// PythonVersionHasSuffix applies the HasSuffix predicate on the "python_version" field.
func PythonVersionHasSuffix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasSuffix(FieldPythonVersion, v))
}

// PythonVersionIsNil applies the IsNil predicate on the "python_version" field.
func PythonVersionIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldPythonVersion))
}

// PythonVersionNotNil applies the NotNil predicate on the "python_version" field.
func PythonVersionNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldPythonVersion))
}

// PythonVersionEqualFold applies the EqualFold predicate on the "python_version" field.
func PythonVersionEqualFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEqualFold(FieldPythonVersion, v))
}

// PythonVersionContainsFold applies the ContainsFold predicate on the "python_version" field.
func PythonVersionContainsFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContainsFold(FieldPythonVersion, v))
}

// PytorchVersionEQ applies the EQ predicate on the "pytorch_version" field.
func PytorchVersionEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldPytorchVersion, v))
}

// PytorchVersionNEQ applies the NEQ predicate on the "pytorch_version" field.
func PytorchVersionNEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldPytorchVersion, v))
}

// PytorchVersionIn applies the In predicate on the "pytorch_version" field.
func PytorchVersionIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldPytorchVersion, vs...))
}

// PytorchVersionNotIn applies the NotIn predicate on the "pytorch_version" field.
func PytorchVersionNotIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldPytorchVersion, vs...))
}

// PytorchVersionGT applies the GT predicate on the "pytorch_version" field.
func PytorchVersionGT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldPytorchVersion, v))
}

// PytorchVersionGTE applies the GTE predicate on the "pytorch_version" field.
func PytorchVersionGTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldPytorchVersion, v))
}

// PytorchVersionLT applies the LT predicate on the "pytorch_version" field.
func PytorchVersionLT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldPytorchVersion, v))
}

// PytorchVersionLTE applies the LTE predicate on the "pytorch_version" field.
func PytorchVersionLTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldPytorchVersion, v))
}

// PytorchVersionContains applies the Contains predicate on the "pytorch_version" field.
func PytorchVersionContains(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContains(FieldPytorchVersion, v))
}

// PytorchVersionHasPrefix applies the HasPrefix predicate on the "pytorch_version" field.
func PytorchVersionHasPrefix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasPrefix(FieldPytorchVersion, v))
}

// PytorchVersionHasSuffix applies the HasSuffix predicate on the "pytorch_version" field.
func PytorchVersionHasSuffix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasSuffix(FieldPytorchVersion, v))
}

// PytorchVersionIsNil applies the IsNil predicate on the "pytorch_version" field.
func PytorchVersionIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldPytorchVersion))
}

// PytorchVersionNotNil applies the NotNil predicate on the "pytorch_version" field.
func PytorchVersionNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldPytorchVersion))
}

// PytorchVersionEqualFold applies the EqualFold predicate on the "pytorch_version" field.
func PytorchVersionEqualFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEqualFold(FieldPytorchVersion, v))
}

// PytorchVersionContainsFold applies the ContainsFold predicate on the "pytorch_version" field.
func PytorchVersionContainsFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContainsFold(FieldPytorchVersion, v))
}

// CudaVersionEQ applies the EQ predicate on the "cuda_version" field.
func CudaVersionEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldCudaVersion, v))
}

// CudaVersionNEQ applies the NEQ predicate on the "cuda_version" field.
func CudaVersionNEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldCudaVersion, v))
}

// CudaVersionIn applies the In predicate on the "cuda_version" field.
func CudaVersionIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldCudaVersion, vs...))
}

// CudaVersionNotIn applies the NotIn predicate on the "cuda_version" field.
func CudaVersionNotIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldCudaVersion, vs...))
}

// CudaVersionGT applies the GT predicate on the "cuda_version" field.
func CudaVersionGT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldCudaVersion, v))
}

// CudaVersionGTE applies the GTE predicate on the "cuda_version" field.
func CudaVersionGTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldCudaVersion, v))
}

// CudaVersionLT applies the LT predicate on the "cuda_version" field.
func CudaVersionLT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldCudaVersion, v))
}

// CudaVersionLTE applies the LTE predicate on the "cuda_version" field.
func CudaVersionLTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldCudaVersion, v))
}

// CudaVersionContains applies the Contains predicate on the "cuda_version" field.
func CudaVersionContains(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContains(FieldCudaVersion, v))
}

// CudaVersionHasPrefix applies the HasPrefix predicate on the "cuda_version" field.
func CudaVersionHasPrefix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasPrefix(FieldCudaVersion, v))
}

// CudaVersionHasSuffix applies the HasSuffix predicate on the "cuda_version" field.
func CudaVersionHasSuffix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasSuffix(FieldCudaVersion, v))
}

// CudaVersionIsNil applies the IsNil predicate on the "cuda_version" field.
func CudaVersionIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldCudaVersion))
}

// CudaVersionNotNil applies the NotNil predicate on the "cuda_version" field.
func CudaVersionNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldCudaVersion))
}

// CudaVersionEqualFold applies the EqualFold predicate on the "cuda_version" field.
func CudaVersionEqualFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEqualFold(FieldCudaVersion, v))
}

// CudaVersionContainsFold applies the ContainsFold predicate on the "cuda_version" field.
func CudaVersionContainsFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContainsFold(FieldCudaVersion, v))
}

// ComfyRunFlagsEQ applies the EQ predicate on the "comfy_run_flags" field.
func ComfyRunFlagsEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldComfyRunFlags, v))
}

// ComfyRunFlagsNEQ applies the NEQ predicate on the "comfy_run_flags" field.
func ComfyRunFlagsNEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldComfyRunFlags, v))
}

// ComfyRunFlagsIn applies the In predicate on the "comfy_run_flags" field.
func ComfyRunFlagsIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldComfyRunFlags, vs...))
}

// ComfyRunFlagsNotIn applies the NotIn predicate on the "comfy_run_flags" field.
func ComfyRunFlagsNotIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldComfyRunFlags, vs...))
}

// ComfyRunFlagsGT applies the GT predicate on the "comfy_run_flags" field.
func ComfyRunFlagsGT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldComfyRunFlags, v))
}

// ComfyRunFlagsGTE applies the GTE predicate on the "comfy_run_flags" field.
func ComfyRunFlagsGTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldComfyRunFlags, v))
}

// ComfyRunFlagsLT applies the LT predicate on the "comfy_run_flags" field.
func ComfyRunFlagsLT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldComfyRunFlags, v))
}

// ComfyRunFlagsLTE applies the LTE predicate on the "comfy_run_flags" field.
func ComfyRunFlagsLTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldComfyRunFlags, v))
}

// ComfyRunFlagsContains applies the Contains predicate on the "comfy_run_flags" field.
func ComfyRunFlagsContains(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContains(FieldComfyRunFlags, v))
}

// ComfyRunFlagsHasPrefix applies the HasPrefix predicate on the "comfy_run_flags" field.
func ComfyRunFlagsHasPrefix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasPrefix(FieldComfyRunFlags, v))
}

// ComfyRunFlagsHasSuffix applies the HasSuffix predicate on the "comfy_run_flags" field.
func ComfyRunFlagsHasSuffix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasSuffix(FieldComfyRunFlags, v))
}

// ComfyRunFlagsIsNil applies the IsNil predicate on the "comfy_run_flags" field.
func ComfyRunFlagsIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldComfyRunFlags))
}

// ComfyRunFlagsNotNil applies the NotNil predicate on the "comfy_run_flags" field.
func ComfyRunFlagsNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldComfyRunFlags))
}

// ComfyRunFlagsEqualFold applies the EqualFold predicate on the "comfy_run_flags" field.
func ComfyRunFlagsEqualFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEqualFold(FieldComfyRunFlags, v))
}

// ComfyRunFlagsContainsFold applies the ContainsFold predicate on the "comfy_run_flags" field.
func ComfyRunFlagsContainsFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContainsFold(FieldComfyRunFlags, v))
}

// AvgVramEQ applies the EQ predicate on the "avg_vram" field.
func AvgVramEQ(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldAvgVram, v))
}

// AvgVramNEQ applies the NEQ predicate on the "avg_vram" field.
func AvgVramNEQ(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldAvgVram, v))
}

// AvgVramIn applies the In predicate on the "avg_vram" field.
func AvgVramIn(vs ...int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldAvgVram, vs...))
}

// AvgVramNotIn applies the NotIn predicate on the "avg_vram" field.
func AvgVramNotIn(vs ...int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldAvgVram, vs...))
}

// AvgVramGT applies the GT predicate on the "avg_vram" field.
func AvgVramGT(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldAvgVram, v))
}

// AvgVramGTE applies the GTE predicate on the "avg_vram" field.
func AvgVramGTE(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldAvgVram, v))
}

// AvgVramLT applies the LT predicate on the "avg_vram" field.
func AvgVramLT(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldAvgVram, v))
}

// AvgVramLTE applies the LTE predicate on the "avg_vram" field.
func AvgVramLTE(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldAvgVram, v))
}

// AvgVramIsNil applies the IsNil predicate on the "avg_vram" field.
func AvgVramIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldAvgVram))
}

// AvgVramNotNil applies the NotNil predicate on the "avg_vram" field.
func AvgVramNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldAvgVram))
}

// PeakVramEQ applies the EQ predicate on the "peak_vram" field.
func PeakVramEQ(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldPeakVram, v))
}

// PeakVramNEQ applies the NEQ predicate on the "peak_vram" field.
func PeakVramNEQ(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldPeakVram, v))
}

// PeakVramIn applies the In predicate on the "peak_vram" field.
func PeakVramIn(vs ...int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldPeakVram, vs...))
}

// PeakVramNotIn applies the NotIn predicate on the "peak_vram" field.
func PeakVramNotIn(vs ...int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldPeakVram, vs...))
}

// PeakVramGT applies the GT predicate on the "peak_vram" field.
func PeakVramGT(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldPeakVram, v))
}

// PeakVramGTE applies the GTE predicate on the "peak_vram" field.
func PeakVramGTE(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldPeakVram, v))
}

// PeakVramLT applies the LT predicate on the "peak_vram" field.
func PeakVramLT(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldPeakVram, v))
}

// PeakVramLTE applies the LTE predicate on the "peak_vram" field.
func PeakVramLTE(v int) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldPeakVram, v))
}

// PeakVramIsNil applies the IsNil predicate on the "peak_vram" field.
func PeakVramIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldPeakVram))
}

// PeakVramNotNil applies the NotNil predicate on the "peak_vram" field.
func PeakVramNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldPeakVram))
}

// JobTriggerUserEQ applies the EQ predicate on the "job_trigger_user" field.
func JobTriggerUserEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEQ(FieldJobTriggerUser, v))
}

// JobTriggerUserNEQ applies the NEQ predicate on the "job_trigger_user" field.
func JobTriggerUserNEQ(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNEQ(FieldJobTriggerUser, v))
}

// JobTriggerUserIn applies the In predicate on the "job_trigger_user" field.
func JobTriggerUserIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIn(FieldJobTriggerUser, vs...))
}

// JobTriggerUserNotIn applies the NotIn predicate on the "job_trigger_user" field.
func JobTriggerUserNotIn(vs ...string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotIn(FieldJobTriggerUser, vs...))
}

// JobTriggerUserGT applies the GT predicate on the "job_trigger_user" field.
func JobTriggerUserGT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGT(FieldJobTriggerUser, v))
}

// JobTriggerUserGTE applies the GTE predicate on the "job_trigger_user" field.
func JobTriggerUserGTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldGTE(FieldJobTriggerUser, v))
}

// JobTriggerUserLT applies the LT predicate on the "job_trigger_user" field.
func JobTriggerUserLT(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLT(FieldJobTriggerUser, v))
}

// JobTriggerUserLTE applies the LTE predicate on the "job_trigger_user" field.
func JobTriggerUserLTE(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldLTE(FieldJobTriggerUser, v))
}

// JobTriggerUserContains applies the Contains predicate on the "job_trigger_user" field.
func JobTriggerUserContains(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContains(FieldJobTriggerUser, v))
}

// JobTriggerUserHasPrefix applies the HasPrefix predicate on the "job_trigger_user" field.
func JobTriggerUserHasPrefix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasPrefix(FieldJobTriggerUser, v))
}

// JobTriggerUserHasSuffix applies the HasSuffix predicate on the "job_trigger_user" field.
func JobTriggerUserHasSuffix(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldHasSuffix(FieldJobTriggerUser, v))
}

// JobTriggerUserIsNil applies the IsNil predicate on the "job_trigger_user" field.
func JobTriggerUserIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldJobTriggerUser))
}

// JobTriggerUserNotNil applies the NotNil predicate on the "job_trigger_user" field.
func JobTriggerUserNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldJobTriggerUser))
}

// JobTriggerUserEqualFold applies the EqualFold predicate on the "job_trigger_user" field.
func JobTriggerUserEqualFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldEqualFold(FieldJobTriggerUser, v))
}

// JobTriggerUserContainsFold applies the ContainsFold predicate on the "job_trigger_user" field.
func JobTriggerUserContainsFold(v string) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldContainsFold(FieldJobTriggerUser, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.FieldNotNull(FieldMetadata))
}

// HasGitcommit applies the HasEdge predicate on the "gitcommit" edge.
func HasGitcommit() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GitcommitTable, GitcommitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGitcommitWith applies the HasEdge predicate on the "gitcommit" edge with a given conditions (other predicates).
func HasGitcommitWith(preds ...predicate.GitCommit) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(func(s *sql.Selector) {
		step := newGitcommitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStorageFile applies the HasEdge predicate on the "storage_file" edge.
func HasStorageFile() predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StorageFileTable, StorageFileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStorageFileWith applies the HasEdge predicate on the "storage_file" edge with a given conditions (other predicates).
func HasStorageFileWith(preds ...predicate.StorageFile) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(func(s *sql.Selector) {
		step := newStorageFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CIWorkflowResult) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CIWorkflowResult) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CIWorkflowResult) predicate.CIWorkflowResult {
	return predicate.CIWorkflowResult(sql.NotPredicates(p))
}
